{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      end = attrs.end,\n      strides = attrs.strides,\n      beginMask = attrs.beginMask,\n      endMask = attrs.endMask,\n      ellipsisMask = attrs.ellipsisMask,\n      newAxisMask = attrs.newAxisMask,\n      shrinkAxisMask = attrs.shrinkAxisMask;\n\n  var _slice_util$sliceInfo = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask),\n      nonStrided = _slice_util$sliceInfo.nonStrided,\n      $begin = _slice_util$sliceInfo.$begin,\n      $strides = _slice_util$sliceInfo.$strides,\n      size = _slice_util$sliceInfo.size,\n      newShape = _slice_util$sliceInfo.newShape,\n      outShape = _slice_util$sliceInfo.outShape;\n\n  var $x = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n  var result;\n\n  if (nonStrided) {\n    var sliced = slice({\n      inputs: {\n        x: $x\n      },\n      backend: backend,\n      attrs: {\n        begin: $begin,\n        size: size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(function (axis) {\n    return axis === 0;\n  })) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    var shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n\n    if (shouldExecuteOnCPU) {\n      var xTexData = backend.texData.get($x.dataId);\n      var values = xTexData.values;\n      var xBuf = buffer($x.shape, $x.dtype, values);\n      var resultValues = stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      var program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  var resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport var stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};","map":null,"metadata":{},"sourceType":"module"}