{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nvar addImplCPU = shared.addImpl,\n    bincountImplCPU = shared.bincountImpl,\n    bincountReduceImplCPU = shared.bincountReduceImpl,\n    ceilImplCPU = shared.ceilImpl,\n    concatImplCPU = shared.concatImpl,\n    equalImplCPU = shared.equalImpl,\n    expImplCPU = shared.expImpl,\n    expm1ImplCPU = shared.expm1Impl,\n    floorImplCPU = shared.floorImpl,\n    gatherNdImplCPU = shared.gatherNdImpl,\n    gatherV2ImplCPU = shared.gatherV2Impl,\n    greaterImplCPU = shared.greaterImpl,\n    greaterEqualImplCPU = shared.greaterEqualImpl,\n    lessImplCPU = shared.lessImpl,\n    lessEqualImplCPU = shared.lessEqualImpl,\n    linSpaceImplCPU = shared.linSpaceImpl,\n    logImplCPU = shared.logImpl,\n    maxImplCPU = shared.maxImpl,\n    maximumImplCPU = shared.maximumImpl,\n    minimumImplCPU = shared.minimumImpl,\n    multiplyImplCPU = shared.multiplyImpl,\n    negImplCPU = shared.negImpl,\n    notEqualImplCPU = shared.notEqualImpl,\n    prodImplCPU = shared.prodImpl,\n    rangeImplCPU = shared.rangeImpl,\n    rsqrtImplCPU = shared.rsqrtImpl,\n    sigmoidImplCPU = shared.sigmoidImpl,\n    simpleAbsImplCPU = shared.simpleAbsImpl,\n    sliceImplCPU = shared.sliceImpl,\n    sparseFillEmptyRowsImplCPU = shared.sparseFillEmptyRowsImpl,\n    sparseReshapeImplCPU = shared.sparseReshapeImpl,\n    sparseSegmentReductionImplCPU = shared.sparseSegmentReductionImpl,\n    sqrtImplCPU = shared.sqrtImpl,\n    stridedSliceImplCPU = shared.stridedSliceImpl,\n    stringNGramsImplCPU = shared.stringNGramsImpl,\n    stringSplitImplCPU = shared.stringSplitImpl,\n    stringToHashBucketFastImplCPU = shared.stringToHashBucketFastImpl,\n    subImplCPU = shared.subImpl,\n    tileImplCPU = shared.tileImpl,\n    topKImplCPU = shared.topKImpl,\n    transposeImplCPU = shared.transposeImpl,\n    uniqueImplCPU = shared.uniqueImpl;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };","map":null,"metadata":{},"sourceType":"module"}