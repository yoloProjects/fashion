{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var tensors = inputs;\n\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend: backend\n    });\n  } // Limit the number of uploaded textures for optimization.\n\n\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    var midIndex = Math.floor(tensors.length / 2);\n    var leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend: backend\n    });\n    var rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend: backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend: backend\n    });\n  }\n\n  var dtype = tensors.map(function (t) {\n    return t.dtype;\n  }).reduce(function (d1, d2) {\n    return upcastType(d1, d2);\n  });\n  var shapes = tensors.map(function (t) {\n    return t.shape;\n  }); // We can make sure shapes are identical in op level.\n\n  var usePackedOp = env().getBool('WEBGL_PACK');\n  var program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport var addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};","map":null,"metadata":{},"sourceType":"module"}