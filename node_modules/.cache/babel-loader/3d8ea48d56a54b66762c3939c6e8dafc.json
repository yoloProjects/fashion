{"ast":null,"code":"import _classCallCheck from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport var DepthwiseConvPacked2DProgram = function DepthwiseConvPacked2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  _classCallCheck(this, DepthwiseConvPacked2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'pads',\n    type: 'ivec2'\n  }, {\n    name: 'strides',\n    type: 'ivec2'\n  }, {\n    name: 'dilations',\n    type: 'ivec2'\n  }, {\n    name: 'inDims',\n    type: 'ivec2'\n  }];\n  this.outputShape = convInfo.outShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  var padLeft = convInfo.padInfo.left;\n  var strideWidth = convInfo.strideWidth;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var texelsAcross = filterWidth;\n  var mainLoop = \"\\n      int xR; int xC; int xCOffset;\\n      vec4 wTexel; vec4 previous; vec4 final;\";\n\n  for (var c = 0; c < filterWidth; c++) {\n    mainLoop += \"\\n          vec4 xTexelC\".concat(c * 2, \";\\n          int xTexelC\").concat(c * 2, \"Ready;\\n          vec4 xTexelC\").concat(c * 2 + 1, \";\\n          int xTexelC\").concat(c * 2 + 1, \"Ready;\\n          vec4 xC\").concat(c, \";\");\n  }\n  /**\n   * This vectorized implementation works by gathering the values needed for\n   * each output channel's dot product into vec4's and then multiplying them\n   * all together (this happens in the final double for-loop below). Most of\n   * the main loop consists of constructing these vec4's with the minimum\n   * number of texture2D calls, which means making use of all four returned\n   * values from a texture2D call at once.\n   */\n\n\n  for (var r = 0; r < filterHeight; r++) {\n    for (var _c = 0; _c < filterWidth; _c++) {\n      mainLoop += \"\\n          xTexelC\".concat(_c * 2, \" = vec4(0.0);\\n          xTexelC\").concat(_c * 2, \"Ready = 0;\\n          xTexelC\").concat(_c * 2 + 1, \" = vec4(0.0);\\n          xTexelC\").concat(_c * 2 + 1, \"Ready = 0;\\n          xC\").concat(_c, \" = vec4(0.0);\");\n    }\n\n    mainLoop += \"\\n        xR = xRCorner + \".concat(r, \" * dilations[0];\\n        if (xR >=0 && xR < inDims[0]) {\\n      \");\n\n    for (var texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      var colIndex = texelC * 2;\n      mainLoop += \"\\n          xC = xCCorner + \".concat(colIndex * dilationWidth, \";\\n          \");\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += \"\\n                xCOffset = xC + 1;\\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n              \"); // This texel has been read in previous iteration if the dilation\n            // is 1.\n\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += \"\\n                xC\".concat(colIndex, \" = vec4(xTexelC\").concat(colIndex - 2, \".zw, xTexelC\").concat(colIndex, \".xy);\\n                \");\n            } else {\n              mainLoop += \"\\n                  xCOffset = xC + 1 - 2;\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    previous = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      previous.zw = vec2(0.0);\\n                    }\\n\\n                    xC\".concat(colIndex, \" = vec4(previous.zw, xTexelC\").concat(colIndex, \".xy);\\n                  } else {\\n                    xC\").concat(colIndex, \" = vec4(0.0, 0.0, xTexelC\").concat(colIndex, \".xy);\\n                  }\\n                  \");\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += \"\\n                if (xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = xTexelC\").concat(colIndex, \";\\n                \");\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            var nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += \"\\n                  xCOffset = xC + imod(pads[1], 2) + \".concat(nextTexelOffset, \";\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                    xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                    }\\n                    xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                  }\\n                  \"); // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n\n              if (dilationWidth > 1) {\n                mainLoop += \"\\n                    xCOffset -= 2;\\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                      xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n                      xTexelC\").concat(colIndex, \"Ready = 1;\\n                    }\\n                    \");\n              }\n\n              mainLoop += \"\\n                  xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".xy);\\n                  \");\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += \"\\n                    xC\".concat(colIndex + 1, \" = xTexelC\").concat(colIndex, \";\\n                    \");\n              } else {\n                mainLoop += \"\\n                    xCOffset = xC + \".concat(nextTexelOffset, \";\\n\\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                      xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                      if (xCOffset + 1 >= inDims[1]) {\\n                        xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                      }\\n                      xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                    }\\n\\n                    xC\").concat(colIndex + 1, \" = xTexelC\").concat(colIndex + 1, \";\\n                    \");\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                xCOffset = xC + 1 - strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xC + 1, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xC + 2 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n              \");\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                  final = vec4(0.0);\\n                  xCOffset = xC + 1 + strides[1];\\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex + 1, \".xy, final.xy);\\n                \");\n            }\n          } else {\n            mainLoop += \"\\n                if(xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                xCOffset = xC + strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex + 1, \".zw = vec2(0.);\\n                  }\\n                  xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = vec4(\\n                  xTexelC\").concat(colIndex, \".xy, xTexelC\").concat(colIndex + 1, \".xy);\\n              \");\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                  xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n                \");\n            }\n          }\n        }\n      } // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n\n\n      if (colIndex < filterWidth) {\n        mainLoop += \"\\n            wTexel = getW(\".concat(r, \", \").concat(colIndex, \", d1, q);\\n            dotProd += xC\").concat(colIndex, \" * vec4(wTexel.xz, wTexel.xz);\\n          \");\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += \"\\n              wTexel = getW(\".concat(r, \", \").concat(colIndex + 1, \", d1, q);\\n              dotProd += xC\").concat(colIndex + 1, \" * vec4(wTexel.xz, wTexel.xz);\\n            \");\n        }\n      }\n    }\n\n    mainLoop += \"\\n        }\\n      \";\n  }\n\n  var activationSnippet = '',\n      applyActivationSnippet = '';\n\n  if (activation) {\n    if (hasPreluActivation) {\n      activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else if (hasLeakyReluAlpha) {\n      activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else {\n      activationSnippet = \"vec4 activation(vec4 x) {\\n          \".concat(activation, \"\\n        }\");\n    }\n\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n\n  if (hasPreluActivation) {\n    this.variableNames.push('preluActivationWeights');\n  }\n\n  if (hasLeakyReluAlpha) {\n    this.variableNames.push('leakyreluAlpha');\n  }\n\n  this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \").concat(channelMul, \";\\n        int q = d2 - d1 * \").concat(channelMul, \";\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\\n        vec4 dotProd = vec4(0.000000000000001);\\n\\n        \").concat(mainLoop, \"\\n\\n        vec4 result = dotProd - vec4(0.000000000000001);\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}