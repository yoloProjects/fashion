{"ast":null,"code":"import _classCallCheck from \"C:\\\\PythonProjects\\\\For GIt\\\\FashionDetect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var SliceProgram = function SliceProgram(destSize) {\n  _classCallCheck(this, SliceProgram);\n\n  this.variableNames = ['source'];\n  this.outputShape = destSize;\n  this.rank = destSize.length;\n  var dtype = getCoordsDataType(this.rank);\n  this.customUniforms = [{\n    name: 'start',\n    arrayIndex: this.rank,\n    type: 'int'\n  }];\n  var sourceCoords = getCoords(this.rank);\n  var body;\n  var coordSum = destSize.map(function (_, i) {\n    return \"sourceLoc.\".concat(coords[i], \" = start[\").concat(i, \"] + coords.\").concat(coords[i], \";\");\n  });\n  body = \"\\n        \".concat(dtype, \" sourceLoc;\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        \").concat(coordSum.join('\\n'), \"\\n      \");\n  this.userCode = \"\\n      void main() {\\n        \".concat(body, \"\\n        setOutput(getSource(\").concat(sourceCoords, \"));\\n      }\\n    \");\n};\nvar coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(function (x) {\n      return 'sourceLoc.' + x;\n    }).join(',');\n  } else {\n    throw Error(\"Slicing for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}