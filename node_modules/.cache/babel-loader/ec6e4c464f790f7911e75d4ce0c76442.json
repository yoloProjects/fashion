{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n\nfunction split(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  } // When the delimiter is empty, the input is split into individual characters.\n\n\n  if (delimiters.length === 0) {\n    for (var i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n\n    return;\n  } // When there is one delimiter, the input is split only at that delimiter.\n\n\n  if (delimiters.length === 1) {\n    var delimiter = delimiters[0];\n    var f = str.indexOf(delimiter);\n\n    while (f !== -1) {\n      var token = str.subarray(0, f);\n\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n\n    return;\n  } // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n\n\n  var tokenStart = 0;\n\n  for (var _i = 0; _i < str.length + 1; _i++) {\n    if (_i === str.length || delimiters.indexOf(str[_i]) !== -1) {\n      var _token = str.subarray(tokenStart, _i);\n\n      if (!skipEmpty || _token.length !== 0) {\n        result.push(_token);\n      }\n\n      tokenStart = _i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  var batchSize = input.length; // Empty delimiter means split the input character by character.\n\n  var tokens = [];\n  var outputSize = 0;\n  var maxNumEntries = 0;\n  var numIndices = new Array(batchSize);\n\n  for (var i = 0; i < batchSize; ++i) {\n    var prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    var nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  var indices = util.getArrayFromDType('int32', outputSize * 2);\n  var values = new Array(outputSize);\n  var shape = [batchSize, maxNumEntries];\n  var c = 0;\n\n  for (var _i2 = 0; _i2 < batchSize; ++_i2) {\n    for (var j = 0; j < numIndices[_i2]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = _i2;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}","map":null,"metadata":{},"sourceType":"module"}