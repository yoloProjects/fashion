{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Bincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction bincount_(x, weights, size) {\n  var $x = convertToTensor(x, 'x', 'bincount');\n  var $weights = convertToTensor(weights, 'weights', 'bincount');\n  util.assert($x.dtype === 'int32', function () {\n    return \"Error in bincount: input \" + \"dtype must be int32, but got \".concat($x.dtype);\n  });\n  util.assert(size >= 0, function () {\n    return \"size must be non-negative, but got \".concat(size, \".\");\n  });\n  util.assert($weights.size === $x.size || $weights.size === 0, function () {\n    return \"Error in bincount: weights must have the same size as input or\" + \"0-length, but got input shape: \".concat($x.shape, \", weights shape: \") + \"\".concat($weights.shape, \".\");\n  });\n  var inputs = {\n    x: $x,\n    weights: $weights\n  };\n  var attrs = {\n    size: size\n  };\n  return ENGINE.runKernel(Bincount, inputs, attrs);\n}\n\nexport var bincount = op({\n  bincount_: bincount_\n});","map":null,"metadata":{},"sourceType":"module"}