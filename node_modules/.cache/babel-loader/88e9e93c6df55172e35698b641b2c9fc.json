{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nvar getBroadcastDims = backend_util.getBroadcastDims;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  var prefixSnippets = [];\n  inputsInfo.forEach(function (x) {\n    var size = util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n\n    if (program.enableShapeUniforms) {\n      var _getUniformInfoFromSh = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape),\n          uniformShape = _getUniformInfoFromSh.uniformShape;\n\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(\"uniform int \".concat(x.name, \"Shape;\"));\n          break;\n\n        case 2:\n          prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"Shape;\"));\n          break;\n\n        case 3:\n          prefixSnippets.push(\"uniform ivec3 \".concat(x.name, \"Shape;\"));\n          break;\n\n        case 4:\n          prefixSnippets.push(\"uniform ivec4 \".concat(x.name, \"Shape;\"));\n          break;\n\n        default:\n          break;\n      }\n\n      prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"TexShape;\"));\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(\"uniform int outShape;\");\n        break;\n\n      case 2:\n        prefixSnippets.push(\"uniform ivec2 outShape;\");\n        prefixSnippets.push(\"uniform int outShapeStrides;\");\n        break;\n\n      case 3:\n        prefixSnippets.push(\"uniform ivec3 outShape;\");\n        prefixSnippets.push(\"uniform ivec2 outShapeStrides;\");\n        break;\n\n      case 4:\n        prefixSnippets.push(\"uniform ivec4 outShape;\");\n        prefixSnippets.push(\"uniform ivec3 outShapeStrides;\");\n        break;\n\n      default:\n        break;\n    }\n\n    prefixSnippets.push(\"uniform ivec2 outTexShape;\");\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach(function (d) {\n      prefixSnippets.push(\"uniform \".concat(d.type, \" \").concat(d.name).concat(d.arrayIndex ? \"[\".concat(d.arrayIndex, \"]\") : '', \";\"));\n    });\n  }\n\n  var inputPrefixSnippet = prefixSnippets.join('\\n');\n  var inputSamplingSnippet = inputsInfo.map(function (x) {\n    return getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms);\n  }).join('\\n');\n  var outTexShape = outputShape.texShape;\n  var glsl = getGlslDifferences();\n  var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  var outputSamplingSnippet;\n  var floatTextureSetOutputSnippet;\n  var shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  var source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo) {\n  var enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  var shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  var usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  var res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  var inShape = inInfo.shapeInfo.logicalShape;\n  var outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\n\nfunction getShaderPrefix(glsl) {\n  var SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\n\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\n\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\n\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    \";\n    }\n\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    \";\n    }\n\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  \";\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\n\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    \";\n    }\n\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    \";\n    }\n\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  \";\n  }\n\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\n\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\n\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n\n    return \"\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    \".concat(_coordsFromIndexSnippet, \"\\n    return ivec3(r, c, d);\\n  }\\n\");\n  }\n\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\n\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  \";\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  var texelsInBatchN = texelsInBatch;\n  var batches = \"\";\n  var coords = 'b, r, c';\n\n  for (var b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\n\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet2 = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      \".concat(_coordsFromIndexSnippet2, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n  }\n\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\n\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    \";\n    }\n\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  } // texels needed to accommodate a logical row\n\n\n  var texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\n\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    \";\n    }\n\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\n\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n\n  var _inputInfo$shapeInfo$ = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      texNumR = _inputInfo$shapeInfo$[0],\n      texNumC = _inputInfo$shapeInfo$[1];\n\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var _inputInfo$shapeInfo$2 = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n      tNumR = _inputInfo$shapeInfo$2[0],\n      tNumC = _inputInfo$shapeInfo$2[1];\n\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var tNumR = texShape[0];\n  var tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    var _texNumR = texShape[0];\n    var _texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(_texNumC, \".0, \").concat(_texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var _util$squeezeShape = util.squeezeShape(shape),\n      newShape = _util$squeezeShape.newShape,\n      keptDims = _util$squeezeShape.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  if (enableShapeUniforms) {\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(texName, \"Shape[1] + col + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\n\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    var squeezedShape = shape.slice(1);\n    var keptDims = [1, 2];\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n\n  var glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride0 = shape[1] * shape[2];\n  var stride1 = shape[2];\n\n  var _util$squeezeShape2 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape2.newShape,\n      keptDims = _util$squeezeShape2.keptDims;\n\n  var squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int stride1 = \").concat(texName, \"Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(\").concat(texName, \"Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = \").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2];\\n      int stride1 = \").concat(texName, \"Shape[2];\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n    \");\n  }\n\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\n\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    vec4 \".concat(funcName, \"(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= \").concat(texName, \"Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var rank = shape.length;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  var params = \"int b, int row, int col\";\n  var index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n\n  for (var b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride2 = shape[3];\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape3 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape3.newShape,\n      keptDims = _util$squeezeShape3.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var stride2Str = \"int stride2 = \".concat(texName, \"Shape[3];\");\n  var stride1Str = \"int stride1 = \".concat(texName, \"Shape[2] * stride2;\");\n  var stride0Str = \"int stride0 = \".concat(texName, \"Shape[1] * stride1;\");\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        \").concat(stride2Str, \"\\n        \").concat(stride1Str, \"\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2], \").concat(texName, \"Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      \").concat(stride2Str, \"\\n      \").concat(stride1Str, \"\\n      \").concat(stride0Str, \"\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler5D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride3 = shape[4];\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  var _util$squeezeShape4 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape4.newShape,\n      keptDims = _util$squeezeShape4.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getSampler6D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  var _util$squeezeShape5 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape5.newShape,\n      keptDims = _util$squeezeShape5.keptDims;\n\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n\n  var stride4 = shape[5];\n  var stride3 = shape[4] * stride4;\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\n\nfunction getUniformSampler(inputInfo) {\n  var texName = inputInfo.name;\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var type = getCoordsDataType(outRank);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n\n  var output = \"return outputValue;\";\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  var isInputScalar = inSize === 1;\n  var outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  var isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    var rows = inRank - 2;\n    var cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var outTexShape = outShapeInfo.texShape;\n  var inTexShape = inputInfo.shapeInfo.texShape;\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n\n  var type = getCoordsDataType(outRank);\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n\n  var unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  var _util$squeezeShape6 = util.squeezeShape(shape),\n      newShape = _util$squeezeShape6.newShape,\n      keptDims = _util$squeezeShape6.keptDims;\n\n  var rank = shape.length;\n  var useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  var squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  var useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  var uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape: useSqueezeShape,\n    uniformShape: uniformShape,\n    keptDims: keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\n\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(function (d) {\n    return params[d];\n  }).join(', ');\n}","map":null,"metadata":{},"sourceType":"module"}