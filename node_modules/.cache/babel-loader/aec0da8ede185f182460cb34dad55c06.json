{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'SparseFillEmptyRows':\n      {\n        var _tfOps$sparse$sparseF = tfOps.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context)),\n            outputIndices = _tfOps$sparse$sparseF.outputIndices,\n            outputValues = _tfOps$sparse$sparseF.outputValues,\n            emptyRowIndicator = _tfOps$sparse$sparseF.emptyRowIndicator,\n            reverseIndexMap = _tfOps$sparse$sparseF.reverseIndexMap;\n\n        return [outputIndices, outputValues, emptyRowIndicator, reverseIndexMap];\n      }\n\n    case 'SparseReshape':\n      {\n        var _tfOps$sparse$sparseR = tfOps.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context)),\n            _outputIndices = _tfOps$sparse$sparseR.outputIndices,\n            outputShape = _tfOps$sparse$sparseR.outputShape;\n\n        return [_outputIndices, outputShape];\n      }\n\n    case 'SparseSegmentMean':\n      {\n        var outputData = tfOps.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n        return [outputData];\n      }\n\n    case 'SparseSegmentSum':\n      {\n        var _outputData = tfOps.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n\n        return [_outputData];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'sparse';","map":null,"metadata":{},"sourceType":"module"}