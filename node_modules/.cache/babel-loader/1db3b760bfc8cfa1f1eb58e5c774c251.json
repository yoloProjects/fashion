{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\n\nfunction argReduce(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var batchSize = x.shape[0];\n  var inSize = x.shape[1];\n\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var reduceInfo = {\n    windowSize: windowSize,\n    inSize: inSize,\n    batchSize: batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  var program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  var inputs = [x];\n\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n\n  var output = backend.runWebGLProgram(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  var result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(backend, x, reduceType) {\n  var bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  var inSize = inShape[inShape.length - 1];\n  var windowSize = backend_util.computeOptimalWindowSize(inSize);\n  var program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  var inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  var output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape.length === x.shape.length) {\n    var result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n\n  return output;\n}\n\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  var axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    var intermediateTensorInfos = []; // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n\n    var xtexData = backend.texData.get(x.dataId);\n    var xIsPacked = xtexData !== null && xtexData.isPacked;\n    var xUnPacked = x;\n\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        outShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var inSize = util.sizeFromShape(reduceShape);\n    var a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend: backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    var reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    var reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(function (t) {\n      return backend.disposeIntermediateTensorInfo(t);\n    });\n    return reshaped;\n  }\n\n  return argReducePacked(backend, x, reduceType);\n}","map":null,"metadata":{},"sourceType":"module"}