{"ast":null,"code":"import _classCallCheck from \"C:\\\\PythonProjects\\\\For GIt\\\\FashionDetect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport var Im2ColPackedProgram = function Im2ColPackedProgram(outputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'inputShape',\n    type: 'ivec3'\n  }, {\n    name: 'pad',\n    type: 'ivec2'\n  }, {\n    name: 'stride',\n    type: 'ivec2'\n  }, {\n    name: 'dilation',\n    type: 'ivec2'\n  }, {\n    name: 'inChannels',\n    type: 'int'\n  }, {\n    name: 'itemsPerBlockRow',\n    type: 'int'\n  }, {\n    name: 'outWidth',\n    type: 'int'\n  }];\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var dataFormat = convInfo.dataFormat;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 0 : 1;\n  var colDim = isChannelsLast ? 1 : 2;\n  var boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[1] && pos < outShape[0]) {' : \"if(blockIndex < \".concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\");\n  var unrolled = \"\";\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          \").concat(boundsCheckingSnippet, \"\\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\\n\\n            if(d0 < inputShape[\").concat(rowDim, \"] && d0 >= 0) {\\n              // Use custom imod instead mod. On Intel GPU, mod may generate\\n              // unexpected value.\\n              // https://github.com/tensorflow/tfjs/issues/5447\\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\\n                  inChannels);\\n\\n              if(d1 < inputShape[\").concat(colDim, \"] && d1 >= 0) {\\n\\n                ch = imod(pos, inChannels);\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}