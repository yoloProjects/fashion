{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BroadcastArgs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Return the shape of s0 op s1 with broadcast.\n *\n * compute r0, the broadcasted shape as a tensor.\n * s0, s1 and r0 are all integer vectors.\n *\n * This function returns the shape of the result of an operation between\n * two tensors of size s0 and s1 performed with broadcast.\n *\n * @param s0 A tensor representing a shape\n * @param s1 A tensor representing a shape\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction broadcastArgs_(s0, s1) {\n  var shape1Input = convertToTensor(s0, 's0', 'broadcastArgs', 'int32');\n  var shape2Input = convertToTensor(s1, 's1', 'broadcastArgs', 'int32');\n\n  if (shape1Input.rank !== 1) {\n    throw new Error('broadcastArgs(): first input must be a vector (rank=1). ' + \"Has rank \".concat(shape1Input.rank));\n  }\n\n  if (shape2Input.rank !== 1) {\n    throw new Error('broadcastArgs(): second input must be a vector (rank=1). ' + \"Has rank \".concat(shape2Input.rank));\n  }\n\n  var inputs = {\n    s0: shape1Input,\n    s1: shape2Input\n  };\n  return ENGINE.runKernel(BroadcastArgs, inputs);\n}\n\nexport var broadcastArgs = op({\n  broadcastArgs_: broadcastArgs_\n});","map":null,"metadata":{},"sourceType":"module"}