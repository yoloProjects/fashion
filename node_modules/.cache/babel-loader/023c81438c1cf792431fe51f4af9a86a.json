{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\n\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n  var $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  var $input = convertToTensor(input, 'input', 'avgPoolGrad');\n  util.assert($input.rank === $dy.rank, function () {\n    return \"Rank of input (\".concat($input.rank, \") does not match rank of dy (\").concat($dy.rank, \")\");\n  });\n  var input4D = $input;\n  var dy4D = $dy;\n  var reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(dy4D.rank === 4, function () {\n    return \"Error in avgPoolGrad: dy must be rank 4 but got rank \" + \"\".concat(dy4D.rank, \".\");\n  });\n  util.assert(input4D.rank === 4, function () {\n    return \"Error in avgPoolGrad: input must be rank 4 but got rank \" + \"\".concat(input4D.rank, \".\");\n  });\n  var inputs = {\n    dy: dy4D,\n    input: input4D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  var res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var avgPoolGrad = op({\n  avgPoolGrad_: avgPoolGrad_\n});","map":null,"metadata":{},"sourceType":"module"}