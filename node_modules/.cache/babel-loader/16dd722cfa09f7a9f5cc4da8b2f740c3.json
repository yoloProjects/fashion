{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImpl } from './StringSplit_impl';\nexport function stringSplit(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var skipEmpty = attrs.skipEmpty;\n  var input = inputs.input,\n      delimiter = inputs.delimiter;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  if (input.shape.length !== 1) {\n    throw new Error(\"Input must be a vector, got shape: \".concat(input.shape));\n  }\n\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\"Delimiter must be a scalar, got shape: \".concat(delimiter.shape));\n  }\n\n  var $input = backend.data.get(input.dataId).values;\n  var $delimiter = backend.data.get(delimiter.dataId).values[0];\n\n  var _stringSplitImpl = stringSplitImpl($input, $delimiter, skipEmpty),\n      _stringSplitImpl2 = _slicedToArray(_stringSplitImpl, 3),\n      indices = _stringSplitImpl2[0],\n      values = _stringSplitImpl2[1],\n      shape = _stringSplitImpl2[2];\n\n  var outputSize = values.length;\n  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];\n}\nexport var stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit\n};","map":null,"metadata":{},"sourceType":"module"}