{"ast":null,"code":"import _toConsumableArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nimport * as log from './log';\n\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\n\nvar EngineState = /*#__PURE__*/function () {\n  function EngineState() {\n    _classCallCheck(this, EngineState);\n\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n\n    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(function (k) {\n          return k.name;\n        })));\n      }\n\n    };\n  }\n\n  _createClass(EngineState, [{\n    key: \"dispose\",\n    value: function dispose() {\n      for (var variableName in this.registeredVariables) {\n        this.registeredVariables[variableName].dispose();\n      }\n    }\n  }]);\n\n  return EngineState;\n}();\n\nexport var Engine = /*#__PURE__*/function () {\n  function Engine(ENV) {\n    _classCallCheck(this, Engine);\n\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n\n  _createClass(Engine, [{\n    key: \"ready\",\n    value: function () {\n      var _ready = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var sortedBackends, i, backendName, success;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.pendingBackendInit != null)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.pendingBackendInit.then(function () {}));\n\n              case 2:\n                if (!(this.backendInstance != null)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                sortedBackends = this.getSortedBackends();\n                i = 0;\n\n              case 6:\n                if (!(i < sortedBackends.length)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                backendName = sortedBackends[i];\n                _context.next = 10;\n                return this.initializeBackend(backendName).success;\n\n              case 10:\n                success = _context.sent;\n\n                if (!success) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 14;\n                return this.setBackend(backendName);\n\n              case 14:\n                return _context.abrupt(\"return\");\n\n              case 15:\n                i++;\n                _context.next = 6;\n                break;\n\n              case 18:\n                throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function ready() {\n        return _ready.apply(this, arguments);\n      }\n\n      return ready;\n    }()\n  }, {\n    key: \"backendNames\",\n    value: function backendNames() {\n      return Object.keys(this.registryFactory);\n    }\n  }, {\n    key: \"findBackend\",\n    value: function findBackend(backendName) {\n      if (!(backendName in this.registry)) {\n        // If the backend hasn't been initialized but we have a registry entry for\n        // it, initialize it and return it.\n        if (backendName in this.registryFactory) {\n          var _this$initializeBacke = this.initializeBackend(backendName),\n              asyncInit = _this$initializeBacke.asyncInit;\n\n          if (asyncInit) {\n            // Backend is not ready yet.\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      return this.registry[backendName];\n    }\n  }, {\n    key: \"findBackendFactory\",\n    value: function findBackendFactory(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        return null;\n      }\n\n      return this.registryFactory[backendName].factory;\n    }\n  }, {\n    key: \"registerBackend\",\n    value: function registerBackend(backendName, factory) {\n      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (backendName in this.registryFactory) {\n        log.warn(\"\".concat(backendName, \" backend was already registered. \") + \"Reusing existing backend factory.\");\n        return false;\n      }\n\n      this.registryFactory[backendName] = {\n        factory: factory,\n        priority: priority\n      };\n      return true;\n    }\n  }, {\n    key: \"setBackend\",\n    value: function () {\n      var _setBackend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(backendName) {\n        var _this$initializeBacke2, success, asyncInit, result;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.registryFactory[backendName] == null)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Backend name '\".concat(backendName, \"' not found in registry\"));\n\n              case 2:\n                this.backendName = backendName;\n\n                if (!(this.registry[backendName] == null)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                this.backendInstance = null;\n                _this$initializeBacke2 = this.initializeBackend(backendName), success = _this$initializeBacke2.success, asyncInit = _this$initializeBacke2.asyncInit;\n\n                if (!asyncInit) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 9;\n                return success;\n\n              case 9:\n                _context2.t0 = _context2.sent;\n                _context2.next = 13;\n                break;\n\n              case 12:\n                _context2.t0 = success;\n\n              case 13:\n                result = _context2.t0;\n\n                if (result) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 16:\n                this.backendInstance = this.registry[backendName];\n                this.setupRegisteredKernels(); // Reset the profiler.\n\n                this.profiler = new Profiler(this.backendInstance);\n                return _context2.abrupt(\"return\", true);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setBackend(_x) {\n        return _setBackend.apply(this, arguments);\n      }\n\n      return setBackend;\n    }()\n  }, {\n    key: \"setupRegisteredKernels\",\n    value: function setupRegisteredKernels() {\n      var _this = this;\n\n      var kernels = getKernelsForBackend(this.backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.setupFunc != null) {\n          kernel.setupFunc(_this.backendInstance);\n        }\n      });\n    }\n  }, {\n    key: \"disposeRegisteredKernels\",\n    value: function disposeRegisteredKernels(backendName) {\n      var _this2 = this;\n\n      var kernels = getKernelsForBackend(backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.disposeFunc != null) {\n          kernel.disposeFunc(_this2.registry[backendName]);\n        }\n      });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n\n  }, {\n    key: \"initializeBackend\",\n    value: function initializeBackend(backendName) {\n      var _this3 = this;\n\n      var registryFactoryEntry = this.registryFactory[backendName];\n\n      if (registryFactoryEntry == null) {\n        throw new Error(\"Cannot initialize backend \".concat(backendName, \", no registration found.\"));\n      }\n\n      try {\n        var backend = registryFactoryEntry.factory();\n        /* Test if the factory returns a promise.\n        Done in a more liberal way than\n        previous 'Promise.resolve(backend)===backend'\n        as we needed to account for custom Promise\n        implementations (e.g. Angular) */\n\n        if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n          var promiseId = ++this.pendingBackendInitId;\n          var success = backend.then(function (backendInstance) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n\n            _this3.registry[backendName] = backendInstance;\n            _this3.pendingBackendInit = null;\n            return true;\n          }).catch(function (err) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n\n            _this3.pendingBackendInit = null;\n            log.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n            log.warn(err.stack || err.message);\n            return false;\n          });\n          this.pendingBackendInit = success;\n          return {\n            success: success,\n            asyncInit: true\n          };\n        } else {\n          this.registry[backendName] = backend;\n          return {\n            success: true,\n            asyncInit: false\n          };\n        }\n      } catch (err) {\n        log.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n        log.warn(err.stack || err.message);\n        return {\n          success: false,\n          asyncInit: false\n        };\n      }\n    }\n  }, {\n    key: \"removeBackend\",\n    value: function removeBackend(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        throw new Error(\"\".concat(backendName, \" backend not found in registry\"));\n      }\n\n      if (this.backendName === backendName && this.pendingBackendInit != null) {\n        // There is a pending promise of the backend we want to remove. Make it\n        // obsolete.\n        this.pendingBackendInitId++;\n      }\n\n      if (backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n\n      delete this.registryFactory[backendName]; // Unset the backend if it is active.\n\n      if (this.backendName === backendName) {\n        this.pendingBackendInit = null;\n        this.backendName = null;\n        this.backendInstance = null;\n      }\n    }\n  }, {\n    key: \"getSortedBackends\",\n    value: function getSortedBackends() {\n      var _this4 = this;\n\n      if (Object.keys(this.registryFactory).length === 0) {\n        throw new Error('No backend found in registry.');\n      }\n\n      return Object.keys(this.registryFactory).sort(function (a, b) {\n        // Highest priority comes first.\n        return _this4.registryFactory[b].priority - _this4.registryFactory[a].priority;\n      });\n    }\n  }, {\n    key: \"initializeBackendsAndReturnBest\",\n    value: function initializeBackendsAndReturnBest() {\n      var sortedBackends = this.getSortedBackends();\n\n      for (var i = 0; i < sortedBackends.length; i++) {\n        var backendName = sortedBackends[i];\n\n        var _this$initializeBacke3 = this.initializeBackend(backendName),\n            success = _this$initializeBacke3.success,\n            asyncInit = _this$initializeBacke3.asyncInit;\n\n        if (asyncInit || success) {\n          return {\n            name: backendName,\n            asyncInit: asyncInit\n          };\n        }\n      }\n\n      throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n    }\n  }, {\n    key: \"moveData\",\n    value: function moveData(backend, dataId) {\n      var info = this.state.tensorInfo.get(dataId);\n      var srcBackend = info.backend;\n      var values = this.readSync(dataId);\n      var refCount = srcBackend.refCount(dataId); // Delete the tensor from the old backend and move it to the new\n      // backend.\n\n      srcBackend.disposeData(dataId, true);\n      info.backend = backend;\n      backend.move(dataId, values, info.shape, info.dtype, refCount);\n\n      if (this.shouldCheckForMemLeaks()) {\n        // Track the number of moves during a kernel execution to correctly\n        // detect memory leaks.\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n      }\n    }\n  }, {\n    key: \"tidy\",\n    value: function tidy(nameOrFn, fn) {\n      var _this5 = this;\n\n      var name = null;\n\n      if (fn == null) {\n        // Called with only 1 argument.\n        if (typeof nameOrFn !== 'function') {\n          throw new Error('Please provide a function to tidy()');\n        }\n\n        fn = nameOrFn;\n      } else {\n        // Called with 2 arguments.\n        if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n          throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n        }\n\n        if (typeof fn !== 'function') {\n          throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n        }\n\n        name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance\n        // profiling.\n      }\n\n      var result;\n      return this.scopedRun(function () {\n        return _this5.startScope(name);\n      }, function () {\n        return _this5.endScope(result);\n      }, function () {\n        result = fn();\n\n        if (result instanceof Promise) {\n          console.error('Cannot return a Promise inside of tidy.');\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"scopedRun\",\n    value: function scopedRun(start, end, f) {\n      start();\n\n      try {\n        var res = f();\n        end();\n        return res;\n      } catch (ex) {\n        end();\n        throw ex;\n      }\n    }\n  }, {\n    key: \"nextTensorId\",\n    value: function nextTensorId() {\n      return Engine.nextTensorId++;\n    }\n  }, {\n    key: \"nextVariableId\",\n    value: function nextVariableId() {\n      return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(x) {\n      var y = ENGINE.runKernel(Identity, {\n        x: x\n      });\n      var inputs = {\n        x: x\n      };\n\n      var grad = function grad(dy) {\n        return {\n          x: function x() {\n            var dtype = 'float32';\n            var gradInputs = {\n              x: dy\n            };\n            var attrs = {\n              dtype: dtype\n            };\n            return ENGINE.runKernel(Cast, gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion\n            attrs);\n          }\n        };\n      };\n\n      var saved = [];\n      this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n      return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n\n  }, {\n    key: \"runKernel\",\n    value: function runKernel(kernelName, inputs, attrs) {\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n\n      var hasKernel = getKernel(kernelName, this.backendName) != null;\n\n      if (!hasKernel) {\n        throw new Error(\"Kernel '\".concat(kernelName, \"' not registered for backend '\").concat(this.backendName, \"'\"));\n      }\n\n      return this.runKernelFunc({\n        kernelName: kernelName,\n        inputs: inputs,\n        attrs: attrs\n      });\n    }\n  }, {\n    key: \"shouldCheckForMemLeaks\",\n    value: function shouldCheckForMemLeaks() {\n      return this.ENV.getBool('IS_TEST');\n    }\n  }, {\n    key: \"checkKernelForMemLeak\",\n    value: function checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n      var numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.\n\n      var numOutputDataIds = 0;\n      outInfos.forEach(function (info) {\n        // Complex numbers allocate 3 data ids, one for 'real', one for\n        // 'imaginary', and one for the container that holds the former two.\n        numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n      }); // Account for the number of moves during kernel execution. A \"data move\"\n      // can happen in the middle of a kernel execution, placing a new (key,value)\n      // pair in the data storage. Since data moves have net zero effect (we\n      // always remove the data from the old backend), we have to cancel them out\n      // when detecting memory leaks.\n\n      var numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n      var dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n\n      if (dataIdsLeaked > 0) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has an internal memory leak \") + \"(\".concat(dataIdsLeaked, \" data ids) after running '\").concat(kernelName, \"'\"));\n      }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n\n  }, {\n    key: \"runKernelFunc\",\n    value: function runKernelFunc(kernelParams) {\n      var _this6 = this;\n\n      var outputs;\n      var saved = [];\n      var isTapeOn = this.isTapeOn();\n      var startingBytecount = this.state.numBytes;\n      var startingNumTensors = this.state.numTensors;\n\n      if (this.shouldCheckForMemLeaks()) {\n        this.state.numDataMovesStack.push(0);\n      }\n\n      var kernelFunc;\n\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n\n      var out;\n      var kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ''; // Create the kernelFunc from either a registered kernel OR passed in\n      // forward/backward functions (used by custom grad). In this context a\n      // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n      if (isRegisteredKernelInvocation(kernelParams)) {\n        var kernelName = kernelParams.kernelName,\n            _inputs = kernelParams.inputs,\n            _attrs = kernelParams.attrs;\n\n        if (this.backendName == null) {\n          // backend has not been initialized yet (backend initialization is lazy\n          // can be deferred until an op/ kernel is run).\n          // The below getter has side effects that will try to initialize the\n          // backend and set properties like this.backendName\n          // tslint:disable-next-line: no-unused-expression\n          this.backend;\n        }\n\n        var kernel = getKernel(kernelName, this.backendName);\n        util.assert(kernel != null, function () {\n          return \"Cannot find registered kernel '\".concat(kernelName, \"' for backend '\").concat(_this6.backendName, \"'\");\n        });\n\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n\n          out = kernel.kernelFunc({\n            inputs: _inputs,\n            attrs: _attrs,\n            backend: _this6.backend\n          });\n          var outInfos = Array.isArray(out) ? out : [out];\n\n          if (_this6.shouldCheckForMemLeaks()) {\n            _this6.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n          }\n\n          var outTensors = outInfos.map(function (outInfo) {\n            // todo (yassogba) remove this option (Tensor) when node backend\n            // methods have been modularized and they all return tensorInfo.\n            // TensorInfos do not have a rank attribute.\n            if (outInfo.rank != null) {\n              return outInfo;\n            }\n\n            var dataId = outInfo.dataId,\n                shape = outInfo.shape,\n                dtype = outInfo.dtype;\n            return _this6.makeTensorFromDataId(dataId, shape, dtype);\n          }); // Save any required inputs and outputs.\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since there would be no backprop for these tensors\n          // (which would otherwise dispose them).\n\n          if (isTapeOn) {\n            var tensorsToSave = _this6.getTensorsForGradient(kernelName, _inputs, outTensors);\n\n            saved = _this6.saveTensorsForBackwardMode(tensorsToSave);\n          }\n\n          return outTensors;\n        };\n      } else {\n        var forwardFunc = kernelParams.forwardFunc; // Running a customGrad op.\n\n        var saveFunc = function saveFunc(tensors) {\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since we would never run backprop, which disposes\n          // the kept tensors.\n          if (!isTapeOn) {\n            return;\n          }\n\n          saved = tensors.map(function (tensor) {\n            return _this6.keep(_this6.clone(tensor));\n          });\n        };\n\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n\n          out = _this6.tidy(function () {\n            return forwardFunc(_this6.backend, saveFunc);\n          });\n          var outs = Array.isArray(out) ? out : [out];\n\n          if (_this6.shouldCheckForMemLeaks()) {\n            // Scope name is used to print a more helpful error message if needed.\n            _this6.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n          }\n\n          return outs;\n        };\n      } //\n      // Run the kernelFunc. Optionally profiling it.\n      //\n\n\n      var inputs = kernelParams.inputs,\n          attrs = kernelParams.attrs;\n      var backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n      var kernelProfile;\n      this.scopedRun( // Stop recording to a tape when running a kernel.\n      function () {\n        return _this6.state.kernelDepth++;\n      }, function () {\n        return _this6.state.kernelDepth--;\n      }, function () {\n        if (!_this6.ENV.getBool('DEBUG') && !_this6.state.profiling) {\n          outputs = kernelFunc();\n        } else {\n          kernelProfile = _this6.profiler.profileKernel(kernelOrScopeName, inputs, function () {\n            return kernelFunc();\n          });\n\n          if (_this6.ENV.getBool('DEBUG')) {\n            _this6.profiler.logKernelProfile(kernelProfile);\n          }\n\n          outputs = kernelProfile.outputs;\n        }\n      });\n\n      if (isTapeOn) {\n        this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n      }\n\n      if (this.state.profiling) {\n        this.state.activeProfile.kernels.push({\n          name: kernelOrScopeName,\n          bytesAdded: this.state.numBytes - startingBytecount,\n          totalBytesSnapshot: this.state.numBytes,\n          tensorsAdded: this.state.numTensors - startingNumTensors,\n          totalTensorsSnapshot: this.state.numTensors,\n          inputShapes: Object.keys(inputs).map(function (key) {\n            return inputs[key] != null ? inputs[key].shape : null;\n          }),\n          outputShapes: outputs.map(function (item) {\n            return item.shape;\n          }),\n          kernelTimeMs: kernelProfile.timeMs,\n          extraInfo: kernelProfile.extraInfo\n        });\n      }\n\n      return Array.isArray(out) ? outputs : outputs[0];\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n\n  }, {\n    key: \"saveTensorsForBackwardMode\",\n    value: function saveTensorsForBackwardMode(tensors) {\n      var _this7 = this;\n\n      var saved = tensors.map(function (tensor) {\n        return _this7.keep(_this7.clone(tensor));\n      });\n      return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n\n  }, {\n    key: \"getTensorsForGradient\",\n    value: function getTensorsForGradient(kernelName, inputs, outputs) {\n      var gradConfig = getGradient(kernelName);\n\n      if (gradConfig != null) {\n        var inputsToSave = gradConfig.inputsToSave || [];\n        var outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n        // specified in inputsToSave will be saved.\n\n        var inputTensorsToSave;\n\n        if (gradConfig.saveAllInputs) {\n          util.assert(Array.isArray(inputs), function () {\n            return 'saveAllInputs is true, expected inputs to be an array.';\n          });\n          inputTensorsToSave = Object.keys(inputs).map(function (key) {\n            return inputs[key];\n          });\n        } else {\n          inputTensorsToSave = inputsToSave.map(function (inputName) {\n            return inputs[inputName];\n          });\n        }\n\n        var outputTensorsToSave = outputs.filter(function (_, i) {\n          return outputsToSave[i];\n        });\n        return inputTensorsToSave.concat(outputTensorsToSave);\n      } // We return an empty list rather than throw an error because the kernel we\n      // are looking up may not actually be relevant to backproping through the\n      // overall function\n      //\n      // See 'does not error if irrelevant (pruned) ops are missing grads' test\n      // in gradients_test.ts for an example.\n\n\n      return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n\n  }, {\n    key: \"makeTensor\",\n    value: function makeTensor(values, shape, dtype, backend) {\n      if (values == null) {\n        throw new Error('Values passed to engine.makeTensor() are null');\n      }\n\n      dtype = dtype || 'float32';\n      backend = backend || this.backend;\n      var backendVals = values;\n\n      if (dtype === 'string' && util.isString(values[0])) {\n        backendVals = values.map(function (d) {\n          return util.encodeString(d);\n        });\n      }\n\n      var dataId = backend.write(backendVals, shape, dtype);\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend); // Count bytes for string tensors.\n\n      if (dtype === 'string') {\n        var info = this.state.tensorInfo.get(dataId);\n        var newBytes = bytesFromStringArray(backendVals);\n        this.state.numBytes += newBytes - info.bytes;\n        info.bytes = newBytes;\n      }\n\n      return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n\n  }, {\n    key: \"makeTensorFromDataId\",\n    value: function makeTensorFromDataId(dataId, shape, dtype, backend) {\n      dtype = dtype || 'float32';\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend);\n      return t;\n    }\n  }, {\n    key: \"makeVariable\",\n    value: function makeVariable(initialValue) {\n      var trainable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var name = arguments.length > 2 ? arguments[2] : undefined;\n      var dtype = arguments.length > 3 ? arguments[3] : undefined;\n      name = name || this.nextVariableId().toString();\n\n      if (dtype != null && dtype !== initialValue.dtype) {\n        initialValue = initialValue.cast(dtype);\n      }\n\n      var v = new Variable(initialValue, trainable, name, this.nextTensorId());\n\n      if (this.state.registeredVariables[v.name] != null) {\n        throw new Error(\"Variable with name \".concat(v.name, \" was already registered\"));\n      }\n\n      this.state.registeredVariables[v.name] = v;\n      this.incRef(v, this.backend);\n      return v;\n    }\n  }, {\n    key: \"trackTensor\",\n    value: function trackTensor(a, backend) {\n      this.state.numTensors++;\n\n      if (a.dtype === 'string') {\n        this.state.numStringTensors++;\n      } // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n\n\n      var bytes = 0;\n\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n\n      this.state.numBytes += bytes;\n\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        this.state.numDataBuffers++;\n        this.state.tensorInfo.set(a.dataId, {\n          backend: backend || this.backend,\n          dtype: a.dtype,\n          shape: a.shape,\n          bytes: bytes\n        });\n      }\n\n      if (!(a instanceof Variable)) {\n        this.track(a);\n      }\n    } // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n\n  }, {\n    key: \"incRef\",\n    value: function incRef(a, backend) {\n      this.trackTensor(a, backend);\n      this.backend.incRef(a.dataId);\n    }\n  }, {\n    key: \"removeDataId\",\n    value: function removeDataId(dataId, backend) {\n      if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {\n        this.state.tensorInfo.delete(dataId);\n        this.state.numDataBuffers--;\n      }\n    }\n  }, {\n    key: \"disposeTensor\",\n    value: function disposeTensor(a) {\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        return;\n      }\n\n      var info = this.state.tensorInfo.get(a.dataId);\n      this.state.numTensors--;\n\n      if (a.dtype === 'string') {\n        this.state.numStringTensors--;\n        this.state.numBytes -= info.bytes;\n      } // Don't count bytes for complex numbers as they are counted by their\n      // components.\n\n\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        var bytes = a.size * util.bytesPerElement(a.dtype);\n        this.state.numBytes -= bytes;\n      } // Remove the reference to dataId if backend dispose the data successfully\n\n\n      if (info.backend.disposeData(a.dataId)) {\n        this.removeDataId(a.dataId, info.backend);\n      } // TODO(nsthorat): Construct an error and save the stack trace for\n      // debugging when in debug mode. Creating a stack trace is too expensive\n      // to do unconditionally.\n\n    }\n  }, {\n    key: \"disposeVariables\",\n    value: function disposeVariables() {\n      for (var varName in this.state.registeredVariables) {\n        var v = this.state.registeredVariables[varName];\n        this.disposeVariable(v);\n      }\n    }\n  }, {\n    key: \"disposeVariable\",\n    value: function disposeVariable(v) {\n      this.disposeTensor(v);\n\n      if (this.state.registeredVariables[v.name] != null) {\n        delete this.state.registeredVariables[v.name];\n      }\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      var info = this.backend.memory();\n      info.numTensors = this.state.numTensors;\n      info.numDataBuffers = this.state.numDataBuffers;\n      info.numBytes = this.state.numBytes;\n\n      if (this.state.numStringTensors > 0) {\n        info.unreliable = true;\n\n        if (info.reasons == null) {\n          info.reasons = [];\n        }\n\n        info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n      }\n\n      return info;\n    }\n  }, {\n    key: \"profile\",\n    value: function () {\n      var _profile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(query) {\n        var startBytes, startNumTensors, _iterator, _step, kernel;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.state.profiling = true;\n                startBytes = this.state.numBytes;\n                startNumTensors = this.state.numTensors;\n                this.state.activeProfile.kernels = [];\n                _context3.next = 6;\n                return query();\n\n              case 6:\n                this.state.activeProfile.result = _context3.sent;\n                this.state.profiling = false;\n                this.state.activeProfile.peakBytes = Math.max.apply(Math, _toConsumableArray(this.state.activeProfile.kernels.map(function (d) {\n                  return d.totalBytesSnapshot;\n                })));\n                this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n                this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n                _iterator = _createForOfIteratorHelper(this.state.activeProfile.kernels);\n                _context3.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                kernel = _step.value;\n                _context3.next = 18;\n                return kernel.kernelTimeMs;\n\n              case 18:\n                kernel.kernelTimeMs = _context3.sent;\n                _context3.next = 21;\n                return kernel.extraInfo;\n\n              case 21:\n                kernel.extraInfo = _context3.sent;\n\n              case 22:\n                _context3.next = 14;\n                break;\n\n              case 24:\n                _context3.next = 29;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](12);\n\n                _iterator.e(_context3.t0);\n\n              case 29:\n                _context3.prev = 29;\n\n                _iterator.f();\n\n                return _context3.finish(29);\n\n              case 32:\n                return _context3.abrupt(\"return\", this.state.activeProfile);\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[12, 26, 29, 32]]);\n      }));\n\n      function profile(_x2) {\n        return _profile.apply(this, arguments);\n      }\n\n      return profile;\n    }()\n  }, {\n    key: \"isTapeOn\",\n    value: function isTapeOn() {\n      return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n  }, {\n    key: \"addTapeNode\",\n    value: function addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n      var _this8 = this;\n\n      var tapeNode = {\n        id: this.state.nextTapeNodeId++,\n        kernelName: kernelName,\n        inputs: inputs,\n        outputs: outputs,\n        saved: saved\n      };\n      var gradConfig = getGradient(kernelName);\n\n      if (gradConfig != null) {\n        gradientsFunc = gradConfig.gradFunc;\n      }\n\n      if (gradientsFunc != null) {\n        tapeNode.gradient = function (dys) {\n          // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n          // the backprop graph to the user as null instead of zeros\n          dys = dys.map(function (dy, i) {\n            if (dy == null) {\n              var output = outputs[i];\n              var vals = util.makeZerosTypedArray(output.size, output.dtype);\n              return _this8.makeTensor(vals, output.shape, output.dtype);\n            }\n\n            return dy;\n          }); // Grad functions of ops with single outputs expect a dy, while ops\n          // with multiple outputs expect dys (array of dy).\n\n          return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n        };\n      }\n\n      this.state.activeTape.push(tapeNode);\n    }\n  }, {\n    key: \"keep\",\n    value: function keep(result) {\n      result.kept = true;\n      return result;\n    }\n  }, {\n    key: \"startTape\",\n    value: function startTape() {\n      if (this.state.gradientDepth === 0) {\n        this.state.activeTape = [];\n      }\n\n      this.state.gradientDepth++;\n    }\n  }, {\n    key: \"endTape\",\n    value: function endTape() {\n      this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n\n  }, {\n    key: \"startScope\",\n    value: function startScope(name) {\n      var scopeInfo = {\n        track: [],\n        name: 'unnamed scope',\n        id: this.state.nextScopeId++\n      };\n\n      if (name) {\n        scopeInfo.name = name;\n      }\n\n      this.state.scopeStack.push(scopeInfo);\n      this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n\n  }, {\n    key: \"endScope\",\n    value: function endScope(result) {\n      var _this9 = this;\n\n      var tensorsToTrackInParent = getTensorsInContainer(result);\n      var tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(function (t) {\n        return t.id;\n      })); // Dispose the arrays tracked in this scope.\n\n      for (var i = 0; i < this.state.activeScope.track.length; i++) {\n        var tensor = this.state.activeScope.track[i];\n\n        if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n          tensor.dispose();\n        }\n      }\n\n      var oldScope = this.state.scopeStack.pop();\n      this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.\n\n      tensorsToTrackInParent.forEach(function (tensor) {\n        // Only track the tensor if was allocated in the inner scope and is not\n        // globally kept.\n        if (!tensor.kept && tensor.scopeId === oldScope.id) {\n          _this9.track(tensor);\n        }\n      });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n\n  }, {\n    key: \"gradients\",\n    value: function gradients(f, xs, dy) {\n      var _this10 = this;\n\n      var allowNoGradients = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      util.assert(xs.length > 0, function () {\n        return 'gradients() received an empty list of xs.';\n      });\n\n      if (dy != null && dy.dtype !== 'float32') {\n        throw new Error(\"dy must have 'float32' dtype, but has '\".concat(dy.dtype, \"'\"));\n      }\n\n      var y = this.scopedRun(function () {\n        return _this10.startTape();\n      }, function () {\n        return _this10.endTape();\n      }, function () {\n        return _this10.tidy('forward', f);\n      });\n      util.assert(y instanceof Tensor, function () {\n        return 'The result y returned by f() must be a tensor.';\n      }); // Filter out the nodes that don't connect x => y.\n\n      var filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n\n      if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n        throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n      }\n\n      return this.tidy('backward', function () {\n        var accumulatedGradientMap = {};\n        accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.\n\n        backpropagateGradients(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.\n        function (f) {\n          return _this10.tidy(f);\n        }, // Pass an add function to avoide a circular dep with `tape.ts`.\n        add);\n        var grads = xs.map(function (x) {\n          return accumulatedGradientMap[x.id];\n        });\n\n        if (_this10.state.gradientDepth === 0) {\n          // This means that we are not computing higher-order gradients\n          // and can clean up the tape.\n          _this10.state.activeTape.forEach(function (node) {\n            var _iterator2 = _createForOfIteratorHelper(node.saved),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var tensor = _step2.value;\n                tensor.dispose();\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          });\n\n          _this10.state.activeTape = null;\n        }\n\n        return {\n          value: y,\n          grads: grads\n        };\n      });\n    }\n  }, {\n    key: \"customGrad\",\n    value: function customGrad(f) {\n      var _this11 = this;\n\n      util.assert(util.isFunction(f), function () {\n        return 'The f passed in customGrad(f) must be a function.';\n      });\n      return function () {\n        for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n          inputs[_key] = arguments[_key];\n        }\n\n        util.assert(inputs.every(function (t) {\n          return t instanceof Tensor;\n        }), function () {\n          return 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors';\n        });\n        var res;\n        var inputMap = {};\n        inputs.forEach(function (input, i) {\n          inputMap[i] = input;\n        });\n\n        var forwardFunc = function forwardFunc(_, save) {\n          res = f.apply(void 0, [].concat(inputs, [save]));\n          util.assert(res.value instanceof Tensor, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor';\n          });\n          util.assert(util.isFunction(res.gradFunc), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.';\n          });\n          return res.value;\n        };\n\n        var backwardsFunc = function backwardsFunc(dy, saved) {\n          var gradRes = res.gradFunc(dy, saved);\n          var grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n          util.assert(grads.length === inputs.length, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).';\n          });\n          util.assert(grads.every(function (t) {\n            return t instanceof Tensor;\n          }), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.';\n          });\n          var gradMap = {};\n          grads.forEach(function (grad, i) {\n            gradMap[i] = function () {\n              return grad;\n            };\n          });\n          return gradMap;\n        };\n\n        return _this11.runKernelFunc({\n          forwardFunc: forwardFunc,\n          backwardsFunc: backwardsFunc,\n          inputs: inputMap\n        });\n      };\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.readSync(dataId);\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.read(dataId);\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(query) {\n        var start, timingInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                start = now();\n                _context4.next = 3;\n                return this.backend.time(query);\n\n              case 3:\n                timingInfo = _context4.sent;\n                timingInfo.wallMs = now() - start;\n                return _context4.abrupt(\"return\", timingInfo);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function time(_x3) {\n        return _time.apply(this, arguments);\n      }\n\n      return time;\n    }()\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n\n  }, {\n    key: \"track\",\n    value: function track(result) {\n      if (this.state.activeScope != null) {\n        result.scopeId = this.state.activeScope.id;\n        this.state.activeScope.track.push(result);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"reset\",\n\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    value: function reset() {\n      // Make any pending promise obsolete.\n      this.pendingBackendInitId++;\n      this.state.dispose();\n      this.ENV.reset();\n      this.state = new EngineState();\n\n      for (var backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n\n      this.backendName = null;\n      this.backendInstance = null;\n      this.pendingBackendInit = null;\n    }\n  }, {\n    key: \"backend\",\n    get: function get() {\n      if (this.pendingBackendInit != null) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has not yet been initialized. Make \") + \"sure to await tf.ready() or await tf.setBackend() before calling \" + \"other methods\");\n      }\n\n      if (this.backendInstance == null) {\n        var _this$initializeBacke4 = this.initializeBackendsAndReturnBest(),\n            name = _this$initializeBacke4.name,\n            asyncInit = _this$initializeBacke4.asyncInit;\n\n        if (asyncInit) {\n          throw new Error(\"The highest priority backend '\".concat(name, \"' has not yet been \") + \"initialized. Make sure to await tf.ready() or \" + \"await tf.setBackend() before calling other methods\");\n        }\n\n        this.setBackend(name);\n      }\n\n      return this.backendInstance;\n    }\n  }, {\n    key: \"registeredVariables\",\n    get: function get() {\n      return this.state.registeredVariables;\n    }\n  }]);\n\n  return Engine;\n}();\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\n\nfunction ones(shape) {\n  var values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine() {\n  var ns = getGlobalNamespace();\n\n  if (ns._tfengine == null) {\n    var environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n\n  setEnvironmentGlobal(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n\n  setTensorTracker(function () {\n    return ns._tfengine;\n  });\n  return ns._tfengine;\n}\nexport var ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\n\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  var inputs = {\n    a: a,\n    b: b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":null,"metadata":{},"sourceType":"module"}