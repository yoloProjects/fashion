{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      weights = inputs.weights;\n  var size = attrs.size,\n      binaryOutput = attrs.binaryOutput;\n\n  if (x.shape.length === 1) {\n    var xVals = backend.data.get(x.dataId).values;\n    var weightsVals = backend.data.get(weights.dataId).values;\n    var outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    var xBuf = backend.bufferSync(x);\n    var weightsBuf = backend.bufferSync(weights);\n    var outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\"Error in denseBincount: input must be at most rank 2, but got rank\" + \"\".concat(x.shape.length, \".\"));\n}\nexport var denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount\n};","map":null,"metadata":{},"sourceType":"module"}