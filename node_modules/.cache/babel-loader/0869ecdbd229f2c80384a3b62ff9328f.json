{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\For GIt\\\\FashionDetect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var image = inputs.image,\n      boxes = inputs.boxes,\n      boxInd = inputs.boxInd;\n  var cropSize = attrs.cropSize,\n      method = attrs.method,\n      extrapolationValue = attrs.extrapolationValue;\n\n  var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n\n  var numBoxes = boxes.shape[0];\n\n  var _cropSize = _slicedToArray(cropSize, 2),\n      cropHeight = _cropSize[0],\n      cropWidth = _cropSize[1];\n\n  var output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n  var boxVals = backend.data.get(boxes.dataId).values;\n  var boxIndVals = backend.data.get(boxInd.dataId).values;\n  var imageVals = backend.data.get(image.dataId).values;\n  var inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n\n  var outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n\n  for (var b = 0; b < numBoxes; b++) {\n    var startInd = b * 4;\n    var y1 = boxVals[startInd];\n    var x1 = boxVals[startInd + 1];\n    var y2 = boxVals[startInd + 2];\n    var x2 = boxVals[startInd + 3];\n    var bInd = boxIndVals[b];\n\n    if (bInd >= batch) {\n      continue;\n    }\n\n    var heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    var widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (var y = 0; y < cropHeight; y++) {\n      var yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (var x = 0; x < cropWidth; x++) {\n          for (var c = 0; c < numChannels; c++) {\n            var ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        var topInd = Math.floor(yInd);\n        var bottomInd = Math.ceil(yInd);\n        var yLerp = yInd - topInd;\n\n        for (var _x = 0; _x < cropWidth; _x++) {\n          var xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (var _c = 0; _c < numChannels; _c++) {\n              var _ind = _c + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n\n              output.values[_ind] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          var leftInd = Math.floor(xInd);\n          var rightInd = Math.ceil(xInd);\n          var xLerp = xInd - leftInd;\n\n          for (var _c2 = 0; _c2 < numChannels; _c2++) {\n            var _ind2 = _c2 + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n\n            var topLeft = imageVals[_ind2];\n            _ind2 = _c2 + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            var topRight = imageVals[_ind2];\n            _ind2 = _c2 + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            var bottomLeft = imageVals[_ind2];\n            _ind2 = _c2 + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            var bottomRight = imageVals[_ind2];\n            var top = topLeft + (topRight - topLeft) * xLerp;\n            var bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n            _ind2 = _c2 + _x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[_ind2] = top + (bottom - top) * yLerp;\n          }\n        }\n      } else {\n        // method == \"nearest\"\n        for (var _x2 = 0; _x2 < cropWidth; ++_x2) {\n          var _xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + _x2 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (_xInd < 0 || _xInd > imageWidth - 1) {\n            for (var _c3 = 0; _c3 < numChannels; _c3++) {\n              var _ind3 = _c3 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n\n              output.values[_ind3] = extrapolationValue;\n            }\n\n            continue;\n          }\n\n          var closestX = Math.round(_xInd);\n          var closestY = Math.round(yInd);\n\n          for (var _c4 = 0; _c4 < numChannels; _c4++) {\n            var inInd = _c4 + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n            var outInd = _c4 + _x2 * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport var cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize\n};","map":null,"metadata":{},"sourceType":"module"}