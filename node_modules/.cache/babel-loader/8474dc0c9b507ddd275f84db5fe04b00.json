{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  var weightsSize = util.sizeFromShape(weightsShape);\n  var outVals = util.makeZerosTypedArray(size, weightsDtype);\n\n  for (var i = 0; i < xVals.length; i++) {\n    var value = xVals[i];\n\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size) {\n  var binaryOutput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var numRows = xBuf.shape[0];\n  var numCols = xBuf.shape[1];\n  var outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (var i = 0; i < numRows; i++) {\n    for (var j = 0; j < numCols; j++) {\n      var value = xBuf.get(i, j);\n\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf;\n}","map":null,"metadata":{},"sourceType":"module"}