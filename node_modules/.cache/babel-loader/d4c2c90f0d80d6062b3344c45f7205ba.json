{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var condition = inputs.condition,\n      t = inputs.t,\n      e = inputs.e;\n  assertNotComplex([condition, t, e], 'select');\n  var conditionRank = condition.shape.length;\n  var values = backend.data.get(condition.dataId).values;\n  var tValues = backend.data.get(t.dataId).values;\n  var eValues = backend.data.get(e.dataId).values;\n  var resultDtype = upcastType(t.dtype, e.dtype);\n  var newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n  var index = 0;\n  var offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n\n  for (var i = 0; i < values.length; i++) {\n    for (var j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport var selectConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select\n};","map":null,"metadata":{},"sourceType":"module"}