{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  var axes = util.parseAxisParam(axis, x.shape);\n  var shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  var reduceShape = shapes[1];\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var toDispose = [];\n  var reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  var $x = cast({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  var res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend: backend\n  });\n  toDispose.push(res);\n  var result = sum({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      axis: axis,\n      keepDims: keepDims\n    }\n  });\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":null,"metadata":{},"sourceType":"module"}