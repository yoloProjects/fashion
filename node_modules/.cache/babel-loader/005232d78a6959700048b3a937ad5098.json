{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImpl } from './SparseReshape_impl';\nexport function sparseReshape(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var inputIndices = inputs.inputIndices,\n      inputShape = inputs.inputShape,\n      newShape = inputs.newShape;\n\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(\"Input indices should be a matrix but received shape\\n        \".concat(inputIndices.shape));\n  }\n\n  if (inputShape.shape.length !== 1) {\n    throw new Error(\"Input shape should be a vector but received shape\\n        \".concat(inputShape.shape));\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\"Target shape should be a vector but received shape \".concat(newShape.shape));\n  }\n\n  var $inputShape = Array.from(backend.data.get(inputShape.dataId).values);\n  var $inputIndices = backend.data.get(inputIndices.dataId).values;\n  var targetShape = Array.from(backend.data.get(newShape.dataId).values);\n\n  var _sparseReshapeImpl = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape),\n      _sparseReshapeImpl2 = _slicedToArray(_sparseReshapeImpl, 3),\n      newIndices = _sparseReshapeImpl2[0],\n      indicesShape = _sparseReshapeImpl2[1],\n      outputShape = _sparseReshapeImpl2[2];\n\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport var sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape\n};","map":null,"metadata":{},"sourceType":"module"}