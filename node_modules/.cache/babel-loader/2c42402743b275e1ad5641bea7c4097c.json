{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var data = inputs.data,\n      indices = inputs.indices,\n      segmentIds = inputs.segmentIds;\n\n  if (data.shape.length < 1) {\n    throw new Error(\"Data should be at least 1 dimensional but received scalar\");\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(\"Indices should be a vector but received shape\\n              \".concat(indices.shape));\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(\"Segment ids should be a vector but received shape\\n              \".concat(segmentIds.shape));\n  }\n\n  var $data = backend.readSync(data.dataId);\n  var $indices = backend.readSync(indices.dataId);\n  var $segmentIds = backend.readSync(segmentIds.dataId);\n\n  var _sparseSegmentReducti = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true),\n      _sparseSegmentReducti2 = _slicedToArray(_sparseSegmentReducti, 2),\n      outputData = _sparseSegmentReducti2[0],\n      outputDataShape = _sparseSegmentReducti2[1];\n\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport var sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean\n};","map":null,"metadata":{},"sourceType":"module"}