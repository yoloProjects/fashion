{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var depthRadius = attrs.depthRadius,\n      bias = attrs.bias,\n      alpha = attrs.alpha,\n      beta = attrs.beta;\n  assertNotComplex(x, 'LRN');\n  var channels = x.shape[3];\n  var maxD = channels - 1;\n  var xValues = backend.data.get(x.dataId).values;\n  var size = util.sizeFromShape(x.shape);\n  var result = new Float32Array(size);\n\n  function sumAcrossChannels(offset) {\n    var currentChannel = offset % channels;\n    var beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    var endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    var sum = 0.0;\n\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      var z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n\n    return sum;\n  }\n\n  for (var offset = 0; offset < size; offset++) {\n    var sum = sumAcrossChannels(offset);\n    var val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\nexport var lRNConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN\n};","map":null,"metadata":{},"sourceType":"module"}