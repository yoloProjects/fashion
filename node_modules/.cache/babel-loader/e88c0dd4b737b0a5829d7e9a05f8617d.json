{"ast":null,"code":"import _classCallCheck from \"C:\\\\PythonProjects\\\\For GIt\\\\FashionDetect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport var UnaryOpProgram = function UnaryOpProgram(aShape, opSnippet) {\n  _classCallCheck(this, UnaryOpProgram);\n\n  this.variableNames = ['A'];\n  this.outputShape = aShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  this.userCode = \"\\n      float unaryOperation(float x) {\\n        \".concat(opSnippet, \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \");\n};\nexport var CHECK_NAN_SNIPPET = \"if (isnan(x)) return x;\";\nexport var LINEAR = \"return x;\";\nexport var ABS = \"return abs(x);\";\nexport function STEP() {\n  var alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n  return CHECK_NAN_SNIPPET + \"\\n    return x > 0.0 ? 1.0 : float(\".concat(alpha, \");\\n  \");\n}\nexport var ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\nexport var RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nexport var RELU6 = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\";\nexport var CLONE = 'return x;';\nexport var SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";","map":null,"metadata":{},"sourceType":"module"}