{"ast":null,"code":"import _classCallCheck from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var TransformProgram = function TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n  _classCallCheck(this, TransformProgram);\n\n  this.variableNames = ['Image', 'Transforms'];\n  this.outputShape = outShape;\n  var interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  var fillModeId;\n\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n\n    case 'reflect':\n      fillModeId = 2;\n      break;\n\n    case 'wrap':\n      fillModeId = 3;\n      break;\n\n    case 'nearest':\n      fillModeId = 4;\n      break;\n\n    default:\n      fillModeId = 1;\n      break;\n  }\n\n  this.userCode = \"\\n            float mapCoord(float outCoord, float len) {\\n              float inCoord = outCoord;\\n              if(\".concat(fillModeId, \" == 2) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    if (inCoord < sz2) {\\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\\n                      inCoord;\\n                    }\\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\\n                    if (inCoord >= len) {\\n                      inCoord = sz2 - inCoord - 1.0;\\n                    }\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (\").concat(fillModeId, \" == 3) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord -= len * float(int(float(inCoord / sz)));\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (\").concat(fillModeId, \" == 4) {\\n                return clamp(outCoord, 0.0, len - 1.0);\\n              } else {\\n                return outCoord;\\n              }\\n            }\\n\\n            float readWithFillValue(int batch, int coordY, int coordX,\\n              int channel) {\\n              float outputValue;\\n              if (0 <= coordY && coordY < \").concat(imageHeight, \" && 0 <= coordX && coordX < \").concat(imageWidth, \") {\\n                  outputValue = getImage(batch, coordY, coordX, channel);\\n              } else {\\n                outputValue = float(\").concat(fillValue, \");\\n              }\\n              return outputValue;\\n            }\\n\\n            void main() {\\n              ivec4 coords = getOutputCoords();\\n              float outputValue;\\n              int batch = coords[0];\\n              int x = coords[2];\\n              int y = coords[1];\\n              int channel = coords[3];\\n              float xf = float(x);\\n              float yf = float(y);\\n              float a1 = getTransforms(batch, 0);\\n              float a2 = getTransforms(batch, 1);\\n              float a3 = getTransforms(batch, 2);\\n              float b1 = getTransforms(batch, 3);\\n              float b2 = getTransforms(batch, 4);\\n              float b3 = getTransforms(batch, 5);\\n              float c1 = getTransforms(batch, 6);\\n              float c2 = getTransforms(batch, 7);\\n              float projection = c1 * xf + c2 * yf + 1.0;\\n              if (projection == 0.0) {\\n                outputValue = float(\").concat(fillValue, \");\\n              } else {\\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\\n                float mapX = mapCoord(inX, float(\").concat(imageWidth, \"));\\n                float mapY = mapCoord(inY, float(\").concat(imageHeight, \"));\\n\\n                if (\").concat(interpolationModeId, \" == 1) {\\n                  int coordY = int(round(mapY));\\n                  int coordX = int(round(mapX));\\n                  outputValue = readWithFillValue(batch, coordY, coordX,\\n                    channel);\\n                } else {\\n                  float yFloor = floor(mapY);\\n                  float xFloor = floor(mapX);\\n                  float yCeil = yFloor + 1.0;\\n                  float xCeil = xFloor + 1.0;\\n                  float valueYFloor = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\\n                  float valueYCeil = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\\n                  outputValue = (yCeil - mapY) * valueYFloor +\\n                  (mapY - yFloor) * valueYCeil;\\n                }\\n              }\\n              setOutput(outputValue);\\n            }\\n        \");\n};","map":null,"metadata":{},"sourceType":"module"}