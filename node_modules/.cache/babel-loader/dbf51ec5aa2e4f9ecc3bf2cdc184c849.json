{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport var executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(node, tensorMap, context) {\n    var thenFunc, elseFunc, cond, args, condValue, _ret, pred, _pred, data, inputName, _data, frameId, _data2, _data3, _data4, size, dtype, elementShape, dynamicSize, clearAfterRead, identicalElementShapes, name, tensorArray, id, index, writeTensor, writeTensorArray, readId, readIndex, readTensorArray, gatherId, gatherIndices, gatherDtype, gatherTensorArray, scatterId, scatterIndices, scatterTensor, scatterTensorArray, concatId, concatTensorArray, concatDtype, splitId, splitTensor, lengths, splitTensorArray, sizeId, sizeTensorArray, closeId, closeTensorArray, idTensor, _index, _writeTensor, tensorList, _idTensor, _readIndex, _elementShape, elementDType, _tensorList, _scatterIndices, _scatterTensor, _elementShape2, numElements, _tensorList2, _elementShape3, elementDtype, numElementsParam, _numElements, _tensorList3, _gatherId, _gatherIndices, _elementShape4, _elementDtype, _tensorList4, _idTensor2, _elementShape5, _elementDtype2, _numElements2, _tensorList5, tensor, _elementShape6, _elementDtype3, _tensorList6, _concatId, _tensorList7, _concatDtype, _elementShape7, _idTensor3, _writeTensor2, _tensorList8, _idTensor4, _elementShape8, _elementDType, _tensorList9, _splitTensor, _elementShape9, _lengths, _tensorList10;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = node.op;\n            _context3.next = _context3.t0 === 'If' ? 3 : _context3.t0 === 'StatelessIf' ? 3 : _context3.t0 === 'While' ? 15 : _context3.t0 === 'StatelessWhile' ? 15 : _context3.t0 === 'LoopCond' ? 19 : _context3.t0 === 'Switch' ? 21 : _context3.t0 === 'Merge' ? 32 : _context3.t0 === 'Enter' ? 37 : _context3.t0 === 'Exit' ? 41 : _context3.t0 === 'NextIteration' ? 44 : _context3.t0 === 'TensorArrayV3' ? 47 : _context3.t0 === 'TensorArrayWriteV3' ? 57 : _context3.t0 === 'TensorArrayReadV3' ? 63 : _context3.t0 === 'TensorArrayGatherV3' ? 67 : _context3.t0 === 'TensorArrayScatterV3' ? 72 : _context3.t0 === 'TensorArrayConcatV3' ? 78 : _context3.t0 === 'TensorArraySplitV3' ? 82 : _context3.t0 === 'TensorArraySizeV3' ? 88 : _context3.t0 === 'TensorArrayCloseV3' ? 91 : _context3.t0 === 'TensorListSetItem' ? 95 : _context3.t0 === 'TensorListGetItem' ? 101 : _context3.t0 === 'TensorListScatterV2' ? 107 : _context3.t0 === 'TensorListScatter' ? 107 : _context3.t0 === 'TensorListReserve' ? 114 : _context3.t0 === 'EmptyTensorList' ? 114 : _context3.t0 === 'TensorListGather' ? 121 : _context3.t0 === 'TensorListStack' ? 127 : _context3.t0 === 'TensorListFromTensor' ? 133 : _context3.t0 === 'TensorListConcat' ? 139 : _context3.t0 === 'TensorListPushBack' ? 144 : _context3.t0 === 'TensorListPopBack' ? 149 : _context3.t0 === 'TensorListSplit' ? 154 : 160;\n            break;\n\n          case 3:\n            thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            cond = getParamValue('cond', node, tensorMap, context);\n            args = getParamValue('args', node, tensorMap, context);\n            _context3.next = 9;\n            return cond.data();\n\n          case 9:\n            condValue = _context3.sent;\n\n            if (!condValue[0]) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n          case 14:\n            return _context3.abrupt(\"return\", context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n          case 15:\n            return _context3.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var bodyFunc, condFunc, args, condResult, argIds, condValue, result, _loop;\n\n              return _regeneratorRuntime().wrap(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      bodyFunc = getParamValue('body', node, tensorMap, context);\n                      condFunc = getParamValue('cond', node, tensorMap, context);\n                      args = getParamValue('args', node, tensorMap, context); // Calculate the condition of the loop\n\n                      _context2.next = 5;\n                      return context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n\n                    case 5:\n                      condResult = _context2.sent;\n                      argIds = args.map(function (tensor) {\n                        return tensor.id;\n                      });\n                      _context2.next = 9;\n                      return condResult[0].data();\n\n                    case 9:\n                      condValue = _context2.sent;\n                      // Dispose the intermediate tensors for condition function\n                      condResult.forEach(function (tensor) {\n                        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                          tensor.dispose();\n                        }\n                      });\n                      result = args;\n                      _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                        var origResult, resultIds, condResult;\n                        return _regeneratorRuntime().wrap(function _loop$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                // Record the previous result for intermediate tensor tracking\n                                origResult = result; // Execution the body of the loop\n\n                                _context.next = 3;\n                                return context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n\n                              case 3:\n                                result = _context.sent;\n                                resultIds = result.map(function (tensor) {\n                                  return tensor.id;\n                                }); // Dispose the intermediate tensor for body function that is not global\n                                // kept, not input/output of the body function\n\n                                origResult.forEach(function (tensor) {\n                                  if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                    tensor.dispose();\n                                  }\n                                }); // Recalcuate the condition of the loop using the latest results.\n\n                                _context.next = 8;\n                                return context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n\n                              case 8:\n                                condResult = _context.sent;\n                                _context.next = 11;\n                                return condResult[0].data();\n\n                              case 11:\n                                condValue = _context.sent;\n                                // Dispose the intermediate tensors for condition function\n                                condResult.forEach(function (tensor) {\n                                  if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                    tensor.dispose();\n                                  }\n                                });\n\n                              case 13:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _loop);\n                      });\n\n                    case 13:\n                      if (!condValue[0]) {\n                        _context2.next = 17;\n                        break;\n                      }\n\n                      return _context2.delegateYield(_loop(), \"t0\", 15);\n\n                    case 15:\n                      _context2.next = 13;\n                      break;\n\n                    case 17:\n                      return _context2.abrupt(\"return\", {\n                        v: result\n                      });\n\n                    case 18:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee);\n            })(), \"t1\", 16);\n\n          case 16:\n            _ret = _context3.t1;\n\n            if (!(typeof _ret === \"object\")) {\n              _context3.next = 19;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", _ret.v);\n\n          case 19:\n            pred = getParamValue('pred', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [cloneTensor(pred)]);\n\n          case 21:\n            _pred = getParamValue('pred', node, tensorMap, context);\n            data = getParamValue('data', node, tensorMap, context);\n\n            if (!data.kept) {\n              data = cloneTensor(data);\n            } // Outputs nodes :0 => false, :1 => true\n\n\n            _context3.next = 26;\n            return _pred.data();\n\n          case 26:\n            if (!_context3.sent[0]) {\n              _context3.next = 30;\n              break;\n            }\n\n            _context3.t2 = [undefined, data];\n            _context3.next = 31;\n            break;\n\n          case 30:\n            _context3.t2 = [data, undefined];\n\n          case 31:\n            return _context3.abrupt(\"return\", _context3.t2);\n\n          case 32:\n            inputName = node.inputNames.find(function (name) {\n              return getTensor(name, tensorMap, context) !== undefined;\n            });\n\n            if (!inputName) {\n              _context3.next = 36;\n              break;\n            }\n\n            _data = getTensor(inputName, tensorMap, context);\n            return _context3.abrupt(\"return\", [cloneTensor(_data)]);\n\n          case 36:\n            return _context3.abrupt(\"return\", undefined);\n\n          case 37:\n            frameId = getParamValue('frameName', node, tensorMap, context);\n            _data2 = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return _context3.abrupt(\"return\", [cloneTensor(_data2)]);\n\n          case 41:\n            _data3 = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return _context3.abrupt(\"return\", [cloneTensor(_data3)]);\n\n          case 44:\n            _data4 = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return _context3.abrupt(\"return\", [cloneTensor(_data4)]);\n\n          case 47:\n            size = getParamValue('size', node, tensorMap, context);\n            dtype = getParamValue('dtype', node, tensorMap, context);\n            elementShape = getParamValue('elementShape', node, tensorMap, context);\n            dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            name = getParamValue('name', node, tensorMap, context);\n            tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return _context3.abrupt(\"return\", [tensorArray.idTensor, scalar(1.0)]);\n\n          case 57:\n            id = getParamValue('tensorArrayId', node, tensorMap, context);\n            index = getParamValue('index', node, tensorMap, context);\n            writeTensor = getParamValue('tensor', node, tensorMap, context);\n            writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return _context3.abrupt(\"return\", [writeTensorArray.idTensor]);\n\n          case 63:\n            readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            readIndex = getParamValue('index', node, tensorMap, context);\n            readTensorArray = context.getTensorArray(readId.id);\n            return _context3.abrupt(\"return\", [readTensorArray.read(readIndex)]);\n\n          case 67:\n            gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            gatherIndices = getParamValue('indices', node, tensorMap, context);\n            gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            gatherTensorArray = context.getTensorArray(gatherId.id);\n            return _context3.abrupt(\"return\", [gatherTensorArray.gather(gatherIndices, gatherDtype)]);\n\n          case 72:\n            scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            scatterIndices = getParamValue('indices', node, tensorMap, context);\n            scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return _context3.abrupt(\"return\", [scatterTensorArray.idTensor]);\n\n          case 78:\n            concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            concatTensorArray = context.getTensorArray(concatId.id);\n            concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [concatTensorArray.concat(concatDtype)]);\n\n          case 82:\n            splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            splitTensor = getParamValue('tensor', node, tensorMap, context);\n            lengths = getParamValue('lengths', node, tensorMap, context);\n            splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return _context3.abrupt(\"return\", [splitTensorArray.idTensor]);\n\n          case 88:\n            sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            sizeTensorArray = context.getTensorArray(sizeId.id);\n            return _context3.abrupt(\"return\", [scalar(sizeTensorArray.size(), 'int32')]);\n\n          case 91:\n            closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return _context3.abrupt(\"return\", [closeTensorArray.idTensor]);\n\n          case 95:\n            idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            _index = getParamValue('index', node, tensorMap, context);\n            _writeTensor = getParamValue('tensor', node, tensorMap, context);\n            tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(_index, _writeTensor);\n            return _context3.abrupt(\"return\", [tensorList.idTensor]);\n\n          case 101:\n            _idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            _readIndex = getParamValue('index', node, tensorMap, context);\n            _elementShape = getParamValue('elementShape', node, tensorMap, context);\n            elementDType = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList = context.getTensorList(_idTensor.id);\n            return _context3.abrupt(\"return\", [_tensorList.getItem(_readIndex, _elementShape, elementDType)]);\n\n          case 107:\n            _scatterIndices = getParamValue('indices', node, tensorMap, context);\n            _scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape2 = getParamValue('elementShape', node, tensorMap, context);\n            numElements = getParamValue('numElements', node, tensorMap, context);\n            _tensorList2 = scatter(_scatterTensor, _scatterIndices, _elementShape2, numElements);\n            context.addTensorList(_tensorList2);\n            return _context3.abrupt(\"return\", [_tensorList2.idTensor]);\n\n          case 114:\n            _elementShape3 = getParamValue('elementShape', node, tensorMap, context);\n            elementDtype = getParamValue('elementDType', node, tensorMap, context);\n\n            if (node.op === 'TensorListReserve') {\n              numElementsParam = 'numElements';\n            } else {\n              numElementsParam = 'maxNumElements';\n            }\n\n            _numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            _tensorList3 = reserve(_elementShape3, elementDtype, _numElements);\n            context.addTensorList(_tensorList3);\n            return _context3.abrupt(\"return\", [_tensorList3.idTensor]);\n\n          case 121:\n            _gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            _gatherIndices = getParamValue('indices', node, tensorMap, context);\n            _elementShape4 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList4 = context.getTensorList(_gatherId.id);\n            return _context3.abrupt(\"return\", [_tensorList4.gather(_gatherIndices, _elementDtype, _elementShape4)]);\n\n          case 127:\n            _idTensor2 = getParamValue('tensorListId', node, tensorMap, context);\n            _elementShape5 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype2 = getParamValue('elementDType', node, tensorMap, context);\n            _numElements2 = getParamValue('numElements', node, tensorMap, context);\n            _tensorList5 = context.getTensorList(_idTensor2.id);\n            return _context3.abrupt(\"return\", [_tensorList5.stack(_elementShape5, _elementDtype2, _numElements2)]);\n\n          case 133:\n            tensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape6 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype3 = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList6 = fromTensor(tensor, _elementShape6, _elementDtype3);\n            context.addTensorList(_tensorList6);\n            return _context3.abrupt(\"return\", [_tensorList6.idTensor]);\n\n          case 139:\n            _concatId = getParamValue('tensorListId', node, tensorMap, context);\n            _tensorList7 = context.getTensorList(_concatId.id);\n            _concatDtype = getParamValue('dtype', node, tensorMap, context);\n            _elementShape7 = getParamValue('elementShape', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [_tensorList7.concat(_concatDtype, _elementShape7)]);\n\n          case 144:\n            _idTensor3 = getParamValue('tensorListId', node, tensorMap, context);\n            _writeTensor2 = getParamValue('tensor', node, tensorMap, context);\n            _tensorList8 = context.getTensorList(_idTensor3.id);\n\n            _tensorList8.pushBack(_writeTensor2);\n\n            return _context3.abrupt(\"return\", [_tensorList8.idTensor]);\n\n          case 149:\n            _idTensor4 = getParamValue('tensorListId', node, tensorMap, context);\n            _elementShape8 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDType = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList9 = context.getTensorList(_idTensor4.id);\n            return _context3.abrupt(\"return\", [_tensorList9.popBack(_elementShape8, _elementDType)]);\n\n          case 154:\n            _splitTensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape9 = getParamValue('elementShape', node, tensorMap, context);\n            _lengths = getParamValue('lengths', node, tensorMap, context);\n            _tensorList10 = split(_splitTensor, _lengths, _elementShape9);\n            context.addTensorList(_tensorList10);\n            return _context3.abrupt(\"return\", [_tensorList10.idTensor]);\n\n          case 160:\n            throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n\n          case 161:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function executeOp(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var CATEGORY = 'control';","map":null,"metadata":{},"sourceType":"module"}