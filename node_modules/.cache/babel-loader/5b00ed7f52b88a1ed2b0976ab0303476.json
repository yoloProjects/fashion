{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis;\n  assertNotComplex(x, 'argMax');\n  var axes = util.parseAxisParam(axis, x.shape);\n  var permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  var $x = x;\n  var intermediateTensorInfos = [];\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes($x.shape, axes),\n      _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n      outShape = _backend_util$compute2[0],\n      reduceShape = _backend_util$compute2[1];\n\n  var outSize = util.sizeFromShape(outShape);\n  var vals = util.makeZerosTypedArray(outSize, 'int32');\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var aVals = backend.data.get($x.dataId).values;\n\n  for (var i = 0; i < vals.length; ++i) {\n    var offset = i * reduceSize;\n    var max = aVals[offset];\n    var maxIndex = 0;\n\n    for (var j = 0; j < reduceSize; ++j) {\n      var value = aVals[offset + j];\n\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport var argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax\n};","map":null,"metadata":{},"sourceType":"module"}