{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\n\nvar comparePair = function comparePair(a, b) {\n  var valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\n\n\nfunction select(array, k) {\n  var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;\n\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      var n = right - left + 1;\n\n      var _i = k - left + 1;\n\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(_i - n / 2);\n      var newLeft = Math.max(left, Math.floor(k - _i * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - _i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    } // partition the elements between left and right around t\n\n\n    var t = array[k];\n    var i = left;\n    var j = right;\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    } // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n\n\n    if (j <= k) {\n      left = j + 1;\n    }\n\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  var lastDim = xShape[xShape.length - 1];\n  var batch = x.length / lastDim,\n      size = lastDim;\n  var allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  var allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  var _loop = function _loop(b) {\n    var offset = b * size;\n    var vals = x.subarray(offset, offset + size);\n    var valAndInd = new Array(vals.length);\n    vals.forEach(function (value, index) {\n      return valAndInd[index] = {\n        value: value,\n        index: index\n      };\n    });\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n\n    var outOffset = b * k;\n    var topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    var topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (var i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  };\n\n  for (var b = 0; b < batch; b++) {\n    _loop(b);\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  var outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":null,"metadata":{},"sourceType":"module"}