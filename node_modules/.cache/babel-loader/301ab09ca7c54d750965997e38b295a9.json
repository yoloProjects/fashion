{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      exclusive = attrs.exclusive,\n      reverse = attrs.reverse;\n  assertNotComplex(x, 'cumsum');\n  var permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  var $x = x;\n\n  if (permutation != null) {\n    $x = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n\n  var permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\"backend.cumsum in CPU expects an inner-most \" + \"axis=\".concat($x.shape.length - 1, \" but got axis=\").concat(permutedAxis));\n  }\n\n  var resultDtype = upcastType($x.dtype, 'int32');\n  var vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n  var aVals = backend.data.get($x.dataId).values;\n  var finalDim = $x.shape[$x.shape.length - 1];\n  var indexAdjuster = reverse ? function (i, j) {\n    return i + finalDim - j - 1;\n  } : function (i, j) {\n    return i + j;\n  };\n\n  for (var i = 0; i < aVals.length; i += finalDim) {\n    for (var j = 0; j < finalDim; j++) {\n      var idx = indexAdjuster(i, j);\n\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        var prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  var result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    var reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    var reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\nexport var cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum\n};","map":null,"metadata":{},"sourceType":"module"}