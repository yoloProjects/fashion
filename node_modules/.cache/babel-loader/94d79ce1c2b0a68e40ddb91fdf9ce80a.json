{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nvar ARROW = '->';\nvar ARROW_REGEX = /->/g;\nvar COMMA = ',';\nvar ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\n\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n\n  var numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(\"Equation must contain exactly one arrow (\\\"\".concat(ARROW, \"\\\").\"));\n  }\n\n  var _equation$split = equation.split(ARROW),\n      _equation$split2 = _slicedToArray(_equation$split, 2),\n      inputString = _equation$split2[0],\n      outputString = _equation$split2[1];\n\n  assert(inputString.indexOf(ELLIPSIS) === -1, function () {\n    return \"The ellipsis notation (\\\"\".concat(ELLIPSIS, \"\\\") is not supported yet.\");\n  });\n  var inputTerms = inputString.split(COMMA);\n  var numInputs = inputTerms.length;\n\n  if (numTensors !== numInputs) {\n    throw new Error(\"Expected \".concat(numInputs, \" input tensors, received \").concat(numTensors));\n  }\n\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  var allDims = [];\n\n  var _loop = function _loop(i) {\n    var dimName = outputString[i];\n\n    if (!inputTerms.some(function (inputTerm) {\n      return inputTerm.indexOf(dimName) !== -1;\n    })) {\n      throw new Error(\"Output subscripts contain the label \".concat(dimName, \" \") + \"not present in the input subscripts.\");\n    }\n\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  };\n\n  for (var i = 0; i < outputString.length; ++i) {\n    _loop(i);\n  }\n\n  for (var _i = 0; _i < inputString.length; ++_i) {\n    var dimName = inputString[_i];\n\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  var idDims = new Array(inputTerms.length);\n\n  for (var _i2 = 0; _i2 < numInputs; ++_i2) {\n    if (new Set(inputTerms[_i2].split('')).size !== inputTerms[_i2].length) {\n      throw new Error(\"Found duplicate axes in input component \".concat(inputTerms[_i2], \". \") + \"Support for duplicate axes in input is not implemented yet.\");\n    }\n\n    idDims[_i2] = [];\n\n    for (var j = 0; j < inputTerms[_i2].length; ++j) {\n      idDims[_i2].push(allDims.indexOf(inputTerms[_i2][j]));\n    }\n  }\n\n  var numDims = allDims.length; // Number of unique dimensions.\n\n  var numOutDims = outputString.length; // Number of output dimensions.\n\n  var summedDims = []; // Dimensions being summed over.\n\n  for (var _i3 = numOutDims; _i3 < numDims; ++_i3) {\n    summedDims.push(_i3);\n  }\n\n  return {\n    allDims: allDims,\n    summedDims: summedDims,\n    idDims: idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\n\nexport function getEinsumPermutation(nDims, idDims) {\n  var permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n\n  for (var i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n\n  var expandDims = [];\n\n  for (var _i4 = 0; _i4 < nDims; ++_i4) {\n    if (permutationIndices[_i4] === -1) {\n      expandDims.push(_i4);\n    }\n  }\n\n  permutationIndices = permutationIndices.filter(function (d) {\n    return d !== -1;\n  });\n  return {\n    permutationIndices: permutationIndices,\n    expandDims: expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\n\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  var dimSizes = new Array(nDims);\n\n  var _loop2 = function _loop2(i) {\n    var shape = tensors[i].shape;\n\n    var _loop3 = function _loop3(j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], function () {\n          return \"Expected dimension \".concat(dimSizes[idDims[i][j]], \" at axis \").concat(j, \" \") + \"of input shaped \".concat(JSON.stringify(shape), \", \") + \"but got dimension \".concat(shape[j]);\n        });\n      }\n    };\n\n    for (var j = 0; j < idDims[i].length; ++j) {\n      _loop3(j);\n    }\n  };\n\n  for (var i = 0; i < tensors.length; ++i) {\n    _loop2(i);\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\n\nexport function getEinsumComputePath(summedDims, idDims) {\n  var path = summedDims;\n  var steps = [];\n  var nSteps = 0;\n\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n\n  nSteps = summedDims.length + 1;\n\n  for (var i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n\n  var computedTermIndices = [];\n\n  for (var _i5 = 0; _i5 < path.length; ++_i5) {\n    var summedDim = path[_i5];\n    var termIndices = findTermsWithDim(idDims, summedDim);\n\n    var _iterator = _createForOfIteratorHelper(termIndices),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var termIndex = _step.value;\n\n        if (computedTermIndices.indexOf(termIndex) === -1) {\n          steps[_i5].push(termIndex);\n\n          computedTermIndices.push(termIndex);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return {\n    path: path,\n    steps: steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\n\nexport function isIdentityPermutation(perm) {\n  return perm.every(function (dim, index) {\n    return dim === index;\n  });\n}\n\nfunction findTermsWithDim(idDims, dim) {\n  var termIndices = [];\n\n  for (var i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n\n  return termIndices;\n}","map":null,"metadata":{},"sourceType":"module"}