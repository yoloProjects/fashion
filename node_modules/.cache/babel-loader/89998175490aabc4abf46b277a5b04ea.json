{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  var indicesCount = indicesShape[0];\n  var denseRows = denseShape[0];\n  var emptyRowIndicator = new Array(denseRows);\n  var reverseIndexMap = new Array(indicesCount);\n  var rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\"Received SparseTensor with denseShape[0] = 0 but\\n         indices.shape[0] = \".concat(indicesCount));\n    }\n\n    var outputIndices = util.getArrayFromDType(indicesDType, 0);\n    var outputValues = util.getArrayFromDType(valuesDType, 0);\n    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n\n  var rowsAreOrdered = true;\n  var lastIndicesRow = 0;\n  var csrOffset = new Array(denseRows).fill(0);\n\n  for (var i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    var row = indices[i * rank];\n\n    if (row < 0) {\n      throw new Error(\"indices(\".concat(i, \", 0) is invalid: \").concat(row, \" < 0\"));\n    }\n\n    if (row >= denseRows) {\n      throw new Error(\"indices(\".concat(i, \", 0) is invalid: \").concat(row, \" >= \").concat(denseRows));\n    }\n\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n\n  var allRowsFull = true;\n\n  for (var _row = 0; _row < denseRows; ++_row) {\n    // csrOffset here describes the number of elements in this dense row\n    var rowEmpty = csrOffset[_row] === 0;\n    emptyRowIndicator[_row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty; // In filled version, each row has at least one element.\n\n    csrOffset[_row] = Math.max(csrOffset[_row], 1); // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n\n    if (_row > 0) {\n      csrOffset[_row] += csrOffset[_row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    var _outputIndices = indices;\n    var _outputValues = values;\n\n    for (var _i = 0; _i < indicesCount; ++_i) {\n      reverseIndexMap[_i] = _i;\n    }\n\n    return [_outputIndices, [indicesCount, rank], _outputValues, emptyRowIndicator, reverseIndexMap];\n  } else {\n    var fullIndicesCount = csrOffset[denseRows - 1];\n\n    var _outputIndices2 = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n\n    var _outputValues2 = util.getArrayFromDType(valuesDType, fullIndicesCount);\n\n    var filledCount = new Array(denseRows).fill(0); // Fill in values for rows that are not missing\n\n    for (var _i2 = 0; _i2 < indicesCount; ++_i2) {\n      // indices is a 2d tensor with shape of [N, rank]\n      var _row2 = indices[_i2 * rank];\n      var offset = filledCount[_row2];\n      var outputI = (_row2 === 0 ? 0 : csrOffset[_row2 - 1]) + offset;\n      filledCount[_row2]++; // Increment the filled count for this row.\n\n      for (var j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        _outputIndices2[outputI * rank + j] = indices[_i2 * rank + j];\n      }\n\n      _outputValues2[outputI] = values[_i2]; // We'll need this reverse index map to backprop correctly.\n\n      reverseIndexMap[_i2] = outputI;\n    } // Fill in values for rows that are missing\n\n\n    for (var _row3 = 0; _row3 < denseRows; ++_row3) {\n      var rowCount = filledCount[_row3];\n\n      if (rowCount === 0) {\n        // We haven't filled this row\n        var startingIndex = _row3 === 0 ? 0 : csrOffset[_row3 - 1]; // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n\n        _outputIndices2[startingIndex * rank + 0] = _row3;\n\n        for (var col = 1; col < rank; ++col) {\n          _outputIndices2[startingIndex * rank + col] = 0;\n        }\n\n        _outputValues2[startingIndex] = defaultValue;\n      }\n    }\n\n    return [_outputIndices2, [fullIndicesCount, rank], _outputValues2, emptyRowIndicator, reverseIndexMap];\n  }\n}","map":null,"metadata":{},"sourceType":"module"}