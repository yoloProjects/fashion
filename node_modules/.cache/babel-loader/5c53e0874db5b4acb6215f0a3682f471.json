{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var equation = attrs.equation;\n  var tensors = inputs;\n\n  var _backend_util$decodeE = backend_util.decodeEinsumEquation(equation, tensors.length),\n      allDims = _backend_util$decodeE.allDims,\n      summedDims = _backend_util$decodeE.summedDims,\n      idDims = _backend_util$decodeE.idDims;\n\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n\n  var _backend_util$getEins = backend_util.getEinsumComputePath(summedDims, idDims),\n      path = _backend_util$getEins.path,\n      steps = _backend_util$getEins.steps;\n\n  var nSteps = steps.length;\n  var out = null;\n  var numDimsRemaining = allDims.length;\n  var tensorsToDispose = [];\n\n  for (var i = 0; i < nSteps; ++i) {\n    var _iterator = _createForOfIteratorHelper(steps[i]),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var idTerm = _step.value;\n\n        var _backend_util$getEins2 = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]),\n            perm = _backend_util$getEins2.permutationIndices,\n            dimsToExpand = _backend_util$getEins2.expandDims;\n\n        var x = void 0;\n\n        if (backend_util.isIdentityPermutation(perm)) {\n          x = tensors[idTerm];\n        } else {\n          x = transpose({\n            inputs: {\n              x: tensors[idTerm]\n            },\n            backend: backend,\n            attrs: {\n              perm: perm\n            }\n          });\n          tensorsToDispose.push(x);\n        }\n\n        var targetShape = x.shape.slice();\n\n        for (var k = 0; k < dimsToExpand.length; ++k) {\n          targetShape.splice(dimsToExpand[k], 0, 1);\n        }\n\n        if (!util.arraysEqual(x.shape, targetShape)) {\n          x = reshape({\n            inputs: {\n              x: x\n            },\n            backend: backend,\n            attrs: {\n              shape: targetShape\n            }\n          });\n          tensorsToDispose.push(x);\n        }\n\n        if (out === null) {\n          out = x;\n        } else {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          out = multiply({\n            inputs: {\n              a: x,\n              b: out\n            },\n            backend: backend\n          });\n          tensorsToDispose.push(out);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend: backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n\n      numDimsRemaining--;\n    }\n  } // Clean up intermediate tensors.\n\n\n  for (var _i = 0, _tensorsToDispose = tensorsToDispose; _i < _tensorsToDispose.length; _i++) {\n    var tensorInfo = _tensorsToDispose[_i];\n\n    if (tensorInfo === out) {\n      continue;\n    }\n\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\nexport var einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum\n};","map":null,"metadata":{},"sourceType":"module"}