{"ast":null,"code":"import _slicedToArray from \"C:\\\\PythonProjects\\\\Fashion\\\\YOLOTFjf\\\\tfjs-yolov5-example\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n      keepDims = attrs.keepDims;\n  var xRank = x.shape.length;\n  var toDispose = [];\n  var origAxes = util.parseAxisParam(axis, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  var res;\n\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    var xVals = backend.texData.get(permutedX.dataId).values;\n\n    var _prodImplCPU = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes),\n        outVals = _prodImplCPU.outVals,\n        outShape = _prodImplCPU.outShape,\n        outDtype = _prodImplCPU.outDtype;\n\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(permutedX.shape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        _outShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var inSize = util.sizeFromShape(reduceShape);\n    var a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend: backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    var outputDType = sumOutType(x.dtype);\n    var reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend: backend,\n      attrs: {\n        shape: _outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    var newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend: backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return res;\n}\nexport var prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":null,"metadata":{},"sourceType":"module"}