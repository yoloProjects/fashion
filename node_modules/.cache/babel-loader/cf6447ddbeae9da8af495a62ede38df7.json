{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\n\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB) {\n  var errorMessagePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n\n  util.assert(shapeA.length === shapeB.length, function () {\n    return errorMessagePrefix + \" Shapes \".concat(shapeA, \" and \").concat(shapeB, \" must match\");\n  });\n\n  for (var i = 0; i < shapeA.length; i++) {\n    var dim0 = shapeA[i];\n    var dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, function () {\n      return errorMessagePrefix + \" Shapes \".concat(shapeA, \" and \").concat(shapeB, \" must match\");\n    });\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(function (dim) {\n    return dim < 0;\n  })) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\n\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  var partialShape = mergeElementShape(listElementShape, elementShape);\n  var notfullDefinedShape = !fullDefinedShape(partialShape);\n\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\"Tried to calculate elements of an empty list\" + \" with non-fully-defined elementShape: \".concat(partialShape));\n  }\n\n  if (notfullDefinedShape) {\n    tensors.forEach(function (tensor) {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(\"Non-fully-defined elementShape: \".concat(partialShape));\n  }\n\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(\"Incompatible ranks during merge: \".concat(elementShapeA, \" vs. \").concat(elementShapeB));\n  }\n\n  var result = [];\n\n  for (var i = 0; i < elementShapeA.length; ++i) {\n    var dim0 = elementShapeA[i];\n    var dim1 = elementShapeB[i];\n\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(\"Incompatible shape during merge: \".concat(elementShapeA, \" vs. \").concat(elementShapeB));\n    }\n\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}