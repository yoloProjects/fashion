{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MagicDropzone = function (_Component) {\n  _inherits(MagicDropzone, _Component);\n\n  function MagicDropzone() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, MagicDropzone);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MagicDropzone.__proto__ || Object.getPrototypeOf(MagicDropzone)).call.apply(_ref, [this].concat(args))), _this), _this.isFileDialogActive = false, _this.composeHandlers = function (handler) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return null;\n      }\n\n      return handler;\n    }, _this.onDocumentDrop = function (e) {\n      if (_this.node && _this.node.contains(e.target)) {\n        // if we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n        return;\n      }\n\n      e.preventDefault();\n      _this.dragTargets = [];\n    }, _this.onDragStart = function (e) {\n      var onDragStart = _this.props.onDragStart;\n\n      if (onDragStart) {\n        onDragStart.call(_this, e);\n      }\n    }, _this.onDragEnter = function (e) {\n      var onDragEnter = _this.props.onDragEnter;\n      e.preventDefault(); // Count the dropzone and any children that are entered.\n\n      if (_this.dragTargets.indexOf(e.target) === -1) {\n        _this.dragTargets.push(e.target);\n      }\n\n      var draggedFiles = (0, _utils.getDataTransferItems)(e);\n\n      if (onDragEnter) {\n        onDragEnter.call(_this, e);\n      }\n    }, _this.onDragOver = function (e) {\n      var onDragOver = _this.props.onDragOver;\n      e.preventDefault();\n      e.stopPropagation();\n\n      try {\n        e.dataTransfer.dropEffect = 'copy';\n      } catch (err) {// continue regardless of error\n      }\n\n      if (onDragOver) {\n        onDragOver.call(_this, e);\n      }\n\n      return false;\n    }, _this.onDragLeave = function (e) {\n      var onDragLeave = _this.props.onDragLeave;\n      e.preventDefault(); // Only deactivate once the dropzone and all children have been left.\n\n      _this.dragTargets = _this.dragTargets.filter(function (element) {\n        return element !== e.target && _this.node.contains(element);\n      });\n\n      if (_this.dragTargets.length > 0) {\n        return;\n      }\n\n      if (onDragLeave) {\n        onDragLeave.call(_this, e);\n      }\n    }, _this.onDrop = function (e) {\n      var _this$props = _this.props,\n          onDrop = _this$props.onDrop,\n          onDropAccepted = _this$props.onDropAccepted,\n          onDropRejected = _this$props.onDropRejected,\n          multiple = _this$props.multiple,\n          disablePreview = _this$props.disablePreview,\n          minSize = _this$props.minSize,\n          maxSize = _this$props.maxSize,\n          accept = _this$props.accept;\n      var fileList = (0, _utils.getDataTransferItems)(e);\n      var acceptedFiles = [];\n      var rejectedFiles = []; // Stop default browser behavior\n\n      e.preventDefault(); // If there aren't any files, it might be a link.\n\n      if (fileList.length === 0) {\n        _this.onLink(e);\n\n        return;\n      } // Reset the counter along with the drag on a drop.\n\n\n      _this.dragTargets = [];\n      _this.isFileDialogActive = false;\n      fileList.forEach(function (file) {\n        if (!disablePreview) {\n          try {\n            file.preview = window.URL.createObjectURL(file);\n          } catch (err) {\n            if (process.env.NODE_ENV !== 'production') {// console.error('Failed to generate preview for file', file, err)\n            }\n          }\n        }\n\n        if ((0, _utils.fileAccepted)(file, accept) && (0, _utils.fileMatchSize)(file, maxSize, minSize)) {\n          acceptedFiles.push(file);\n        } else {\n          rejectedFiles.push(file);\n        }\n      });\n\n      if (!multiple) {\n        // if not in multi mode add any extra accepted files to rejected.\n        // This will allow end users to easily ignore a multi file drop in \"single\" mode.\n        rejectedFiles.push.apply(rejectedFiles, _toConsumableArray(acceptedFiles.splice(1)));\n      }\n\n      if (onDrop) {\n        onDrop.call(_this, acceptedFiles, rejectedFiles, [], e);\n      }\n\n      if (rejectedFiles.length > 0 && onDropRejected) {\n        onDropRejected.call(_this, rejectedFiles, e);\n      }\n\n      if (acceptedFiles.length > 0 && onDropAccepted) {\n        onDropAccepted.call(_this, acceptedFiles, e);\n      }\n    }, _this.onClick = function (e) {\n      var _this$props2 = _this.props,\n          onClick = _this$props2.onClick,\n          disableClick = _this$props2.disableClick;\n\n      if (!disableClick) {\n        e.stopPropagation();\n\n        if (onClick) {\n          onClick.call(_this, e);\n        } // in IE11/Edge the file-browser dialog is blocking, ensure this is behind setTimeout\n        // this is so react can handle state changes in the onClick prop above above\n        // see: https://github.com/react-dropzone/react-dropzone/issues/450\n\n\n        setTimeout(_this.open.bind(_this), 0);\n      }\n    }, _this.onInputElementClick = function (e) {\n      var inputProps = _this.props.inputProps;\n      e.stopPropagation();\n\n      if (inputProps && inputProps.onClick) {\n        inputProps.onClick();\n      }\n    }, _this.onFileDialogCancel = function () {\n      // timeout will not recognize context of this method\n      var onFileDialogCancel = _this.props.onFileDialogCancel;\n      var _this2 = _this,\n          fileInputEl = _this2.fileInputEl;\n      var _this3 = _this,\n          isFileDialogActive = _this3.isFileDialogActive; // execute the timeout only if the onFileDialogCancel is defined and FileDialog\n      // is opened in the browser\n\n      if (onFileDialogCancel && isFileDialogActive) {\n        setTimeout(function () {\n          // Returns an object as FileList\n          var FileList = fileInputEl.files;\n\n          if (!FileList.length) {\n            isFileDialogActive = false;\n            onFileDialogCancel();\n          }\n        }, 300);\n      }\n    }, _this.setRef = function (ref) {\n      _this.node = ref;\n    }, _this.setRefs = function (ref) {\n      _this.fileInputEl = ref;\n    }, _this.onLink = function (e) {\n      var _this$props3 = _this.props,\n          onDrop = _this$props3.onDrop,\n          accept = _this$props3.accept;\n\n      if (!accept) {\n        if (onDrop) {\n          onDrop([], [], [], e);\n        }\n\n        return;\n      }\n\n      var extensionReg = /(\\.[^.]+)(?=[,]|$)/gi;\n      var extensions = accept.match(extensionReg);\n\n      if (!extensions) {\n        if (onDrop) {\n          onDrop([], [], [], e);\n        }\n\n        return;\n      }\n\n      var replace = '(https://|http://)((?!http).)*(' + extensions.join('|') + ')';\n      var urlReg = new RegExp(replace, 'gi');\n      var links = [];\n\n      if (e.dataTransfer) {\n        var uriLink = decodeURIComponent(e.dataTransfer.getData('text/uri-list')).match(urlReg);\n        var htmlLink = e.dataTransfer.getData('text/html').match(urlReg); // Have priority of the actual uri.\n\n        if (uriLink) {\n          links = [].concat(_toConsumableArray(uriLink));\n        } else if (htmlLink) {\n          links = [].concat(_toConsumableArray(htmlLink.filter(function (l) {\n            return l.indexOf('\"') === -1;\n          }).map(function (v) {\n            return decodeURIComponent(v);\n          })));\n        }\n      } else {\n        // Not sure when this will ever be the case?\n        links = [].concat(_toConsumableArray(decodeURIComponent(e.target.value).match(urlReg)));\n      }\n\n      if (onDrop) {\n        onDrop([], [], links, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(MagicDropzone, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var preventDropOnDocument = this.props.preventDropOnDocument;\n      this.dragTargets = [];\n\n      if (preventDropOnDocument) {\n        document.addEventListener('dragover', _utils.onDocumentDragOver, false);\n        document.addEventListener('drop', this.onDocumentDrop, false);\n      }\n\n      this.fileInputEl.addEventListener('click', this.onInputElementClick, false); // Tried implementing addEventListener, but didn't work out\n\n      document.body.onfocus = this.onFileDialogCancel;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var preventDropOnDocument = this.props.preventDropOnDocument;\n\n      if (preventDropOnDocument) {\n        document.removeEventListener('dragover', _utils.onDocumentDragOver);\n        document.removeEventListener('drop', this.onDocumentDrop);\n      }\n\n      this.fileInputEl.removeEventListener('click', this.onInputElementClick, false); // Can be replaced with removeEventListener, if addEventListener works\n\n      document.body.onfocus = null;\n    } // After much internal debate I decided to not distinguish that the files will\n    // be accepted. It is not widely supported and we only get mime-type info back\n    // Also, users won't be able to react fast enough to do anything if the\n    // overlay says WAIT THAT FILE ISN'T GOING TO WORK\n\n  }, {\n    key: 'open',\n\n    /**\n     * Open system file upload dialog.\n     *\n     * @public\n     */\n    value: function open() {\n      this.isFileDialogActive = true;\n      this.fileInputEl.value = null;\n      this.fileInputEl.click();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          accept = _props.accept,\n          children = _props.children,\n          disabled = _props.disabled,\n          multiple = _props.multiple,\n          possibleUnused = _objectWithoutProperties(_props, ['accept', 'children', 'disabled', 'multiple']);\n\n      var preventDropOnDocument = possibleUnused.preventDropOnDocument,\n          disablePreview = possibleUnused.disablePreview,\n          disableClick = possibleUnused.disableClick,\n          maxSize = possibleUnused.maxSize,\n          minSize = possibleUnused.minSize,\n          inputProps = possibleUnused.inputProps,\n          onDropAccepted = possibleUnused.onDropAccepted,\n          onDropRejected = possibleUnused.onDropRejected,\n          onFileDialogCancel = possibleUnused.onFileDialogCancel,\n          restOfProps = _objectWithoutProperties(possibleUnused, ['preventDropOnDocument', 'disablePreview', 'disableClick', 'maxSize', 'minSize', 'inputProps', 'onDropAccepted', 'onDropRejected', 'onFileDialogCancel']);\n\n      return _react2.default.createElement('div', _extends({}, restOfProps, {\n        onClick: this.composeHandlers(this.onClick),\n        onDragStart: this.composeHandlers(this.onDragStart),\n        onDragEnter: this.composeHandlers(this.onDragEnter),\n        onDragOver: this.composeHandlers(this.onDragOver),\n        onDragLeave: this.composeHandlers(this.onDragLeave),\n        onDrop: this.composeHandlers(this.onDrop),\n        ref: this.setRef,\n        'aria-disabled': disabled\n      }), children, _react2.default.createElement('input', {\n        disabled: disabled,\n        accept: accept,\n        type: 'file',\n        style: {\n          display: 'none'\n        },\n        multiple: _utils.supportMultiple && multiple,\n        ref: this.setRefs,\n        onChange: this.onDrop,\n        autoComplete: 'off'\n      }));\n    }\n  }]);\n\n  return MagicDropzone;\n}(_react.Component);\n\nMagicDropzone.defaultProps = {\n  preventDropOnDocument: true,\n  disabled: false,\n  disablePreview: false,\n  disableClick: false,\n  multiple: true,\n  maxSize: Infinity,\n  minSize: 0\n};\nexports.default = MagicDropzone;","map":null,"metadata":{},"sourceType":"script"}