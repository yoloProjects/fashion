{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      segmentIds = inputs.segmentIds;\n  var numSegments = attrs.numSegments;\n  var xRank = x.shape.length;\n  var toDispose = [];\n  var axis = 0;\n  var permutation = backend_util.getAxesPermutation([axis], xRank);\n  var permutedX = x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  var outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  var inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  var a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend: backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  var outputDType = sumOutType(x.dtype);\n\n  var segOpCompute = function segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n    var batchSize = x.shape[0];\n    var inSize = x.shape[1];\n    var windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    var segOpInfo = {\n      windowSize: windowSize,\n      inSize: inSize,\n      batchSize: batchSize,\n      numSegments: numSegments\n    };\n    var program = new SegmentOpProgram(segOpInfo, segOpType);\n    var output = backend.compileAndRun(program, [x, segmentIds], dtype);\n    toDispose.push(output); // No need to run another GPGPU program.\n\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n\n    var rangeInfo = range({\n      backend: backend,\n      attrs: {\n        start: 0,\n        stop: numSegments,\n        step: 1,\n        dtype: 'float32'\n      }\n    });\n    var tileInfo = tile({\n      inputs: {\n        x: rangeInfo\n      },\n      backend: backend,\n      attrs: {\n        reps: [inSize / windowSize]\n      }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    var result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n    return result;\n  };\n\n  var segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n  var reshaped = reshape({\n    inputs: {\n      x: segOpResult\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  var result = reshaped;\n\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    var perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        perm: perm\n      }\n    });\n  }\n\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum\n};","map":null,"metadata":{},"sourceType":"module"}