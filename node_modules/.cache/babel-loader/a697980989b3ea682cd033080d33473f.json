{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockSize = attrs.blockSize,\n      dataFormat = attrs.dataFormat;\n  util.assert(dataFormat === 'NHWC', function () {\n    return \"Only NHWC dataFormat supported on CPU for depthToSpace. Got \".concat(dataFormat);\n  });\n  util.assert(blockSize > 1, function () {\n    return \"blockSize should be > 1 for depthToSpace, but was: \".concat(blockSize);\n  });\n  var batchSize = x.shape[0];\n  var inputHeight = x.shape[1];\n  var inputWidth = x.shape[2];\n  var inputDepth = x.shape[3];\n  var outputHeight = inputHeight * blockSize;\n  var outputWidth = inputWidth * blockSize;\n  var outputDepth = inputDepth / (blockSize * blockSize);\n  var xValues = backend.data.get(x.dataId).values;\n  var result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  var outputIdx = 0;\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var h = 0; h < outputHeight; ++h) {\n      var inH = Math.floor(h / blockSize);\n      var offsetH = h % blockSize;\n\n      for (var w = 0; w < outputWidth; ++w) {\n        var inW = Math.floor(w / blockSize);\n        var offsetW = w % blockSize;\n        var offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n\n        for (var d = 0; d < outputDepth; ++d) {\n          var inD = d + offsetD;\n          var inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport var depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":null,"metadata":{},"sourceType":"module"}