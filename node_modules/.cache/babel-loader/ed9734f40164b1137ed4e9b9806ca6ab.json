{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n      crops = attrs.crops;\n  assertNotComplex([x], 'batchToSpaceND');\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  var xReshaped = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  var xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend: backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  var xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend: backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  var result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend: backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nexport var batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND\n};","map":null,"metadata":{},"sourceType":"module"}